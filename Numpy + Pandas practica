"PYTHON PANDAS / UNIDAD 2 "
'Diego , segundo script de entrega de Numpy'

import numpy as np


arr = np.array([1,2,3,4,5])
print(arr)
print(type(arr))

selva = np.array(["leon", "mono", "tiburon", "anaconda", "araña", "piton"])
selva
selva [0]

a = np.array([1,2,3,4,5])
a = np.array([0], np.int16)  #numero almacenado de 16 bits
a

x = np.array(range(5), dtype=int)
x[0] = 1.33 #la asignacion con el flotante no coincide por: dtype = int
x

x[1] = "is this a string"

a = np.array([[1,3],[4,5]])
a

a = np.array([[1,0,0], [0,1,0],[0,0,1]])
a

a = np.arange(10)
a

a = np.ones((3,3)) #np.ones devuelve una matriz
a #asignandosele un tamaño a la matriz

a = np.linspace(0,10,20) #Devuelve numeros espaciados uniformemente
a #durante un intervalo especifico

X,Y = np.meshgrid([1,2,3],[4,5,6]) #Devuelve una tupla de matrices de coordenadas
X # a partir de vectores de coordenadas.

Y #matriz Y

a = np.zeros((3,3)) #Devuelve una nueva matriz de ceros
a

###############################################################################
############################# Apilamiento de matrices #########################

numeros_aleatorios = np.arange(5)
numeros_definidos = ([9,10,11,12,13])
numeros_aleatorios
numeros_definidos

np.hstack([numeros_aleatorios, numeros_definidos]) #apilamiento horizontal
np.vstack([numeros_aleatorios, numeros_definidos]) #apilamiento vertical

np.c_[numeros_aleatorios, numeros_aleatorios] #apilar colummnas
np.r_[numeros_definidos, numeros_definidos] #apilar filas

x = list[1:30]
x = np.arange(4)
x

np.repeat(x,3)
np.little(x,(10,1)) #muestra una matriz

######################### para remodelar matrices en numpy ####################

a = np.arange(12).reshape(3,4)
a

#################### - TRANSPOSICION DE MATRICES ##############################

a.traspose()
a.T

##################### - Operacion con matrices logicas - ######################

x = np.arange(50).reshape(5,10)
x

x[:,0] #numeros de 10 en 10 apartir del 0
x[4,:] #numeros de 1 en 1 apartir de 40

###############################################################################
"Funciones universales que funcionan en matrices multidimensionales"

#se crea nuestra propia funcion.
def mi_funcion1 (x,y):
    return x+y

mi_funcion1 = np.frompyfunc(mi_funcion1, 2,1)
print(mi_funcion1([1,2,3,4],[5,6,7,8]))

###############################################################################
"Aritmetica simple"

#suma: add
#resta: subtract
#multiplicacion: multiply
#division: divide
#potencia: power
#absoluto: abds

arr1 = np.array([10,11,12,13,14,15])
arr2 = np.array([20, 21, 22, 23, 24, 25])

#Suma de matrices: add
new_arr = np.add(arr1, arr2)
print (new_arr)

#Resta de matrices: subtrac
new_arr = np.subtract(arr1, arr2)
print(new_arr)

###############################################################################
#Redondeo de decimales
"Truncamiento" #elimina los decimales y devuelve el numero mas cercano a cero de un floot
#esta funcion usa .trunc o .fix
"Redondeo" #incrementa el digito o decimal anterior en 1 si >=5; de lo contrario, 
#no hace nada, usa  .around
"piso" #redondea el decimal al entero mas cercano,.floor
"techo" #redondea el decimal al entero superior mas cercano,. ceil

np.trunc([-3.1666, 3.7667])
np.fix([-3.1666, 3.6667])
arr = np.around(3.1666, 2)
print(arr)

arr = np.around(3.141592, 2)
print(arr)

arr = np.floor([-3.1666, 3.6667])
print(arr)

arr = np.ceil([-3.1666, 3.6667])
arr

arr = np.arange(1,11)
arr

np.log2(arr)
np.log10(arr)
np.log(arr)

#librerias
from math import log 
import numpy as np

funcion_rara = np.frompyfunc (log, 2,1)
funcion_rara(77, 5)


#python pandas #2 manejo de datos 
"es una libreria o modulo que sirve para conjunto de datos, sirve para limpiar"
"arreglar y filtrar datos, sirve para analizar grandes volumenes de datos"
"se usa mucho en ciencia de datos, correlacion , promedio, valor maximo y minimo"
#Data engine#

import pandas as pd 

cositas = {'car':["BMW","AUDI","FORD"],'pasajeros':[3,7,9]}

funcion1 = pd.DataFrame(cositas) #la funcion va con D y F mayuscula

funcion1

#serie de la funcion.

objeto = [1,2,3,4,5,6,7]
mifuncion2 = pd.series(objeto)
objeto

objeto[5] #le asocia una etiqueta correspondiente al valor[de este numero]

objeto1 = [1,2,3,4,5,6,7]
objeto1 = pd.series(objeto1, index = ["x1","x2","x3","x4","x5""x6","x7","x7","x8"])
objeto1 #agregar el atributo con la funcion index y la etiqueta#

datos = {"calorias":[420,380,390], "duracion":[40,25,43]}
datos_calorias = pd.DataFrame(datos)
datos_calorias

print(datos.loc[[0,2]])
df = pd.DataFrame(datos, index =["uno","dos","tres"])
df
print(datos.loc[2,3]) #funcion de localizacion

df = pd.read_csv("data.csv")
df

#para un jason es
df= pd.read_jason("nombre de archivo")
