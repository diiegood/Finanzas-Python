"Modelo CAPM , series de tiempo y analisis de regresion entre indice y activo."
"(sincornizacion de variables para comparar)"
#usa el modulo secundario de calculos, para poder correr este codigo:

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as st
import importlib
import os

#Para el Capm se necesita 2 series de tiempo y una sincronizacion de las mismas
#tambien se usa para la matriz de covarianza y varianza.

###############################################################################
"Comparacion de activos" ## Definir los activos (ric) y el benchmark

#security = '^MXN' (benchmark)
security = "XLK" #variable y #activo
benchmark = "SPY" #variable x #indice de referencia

###############################################################################

# Definir el directorio donde se encuentran los archivos CSV
directorio = 'C:\\Users\\creep\\.spyder-py3\\stocks\\'

# Iterar sobre cada activo (ric) y procesarlo

def series_tiempo(ric):
    directorio ='C:\\Users\\creep\\.spyder-py3\\stocks\\'   #ruta de consulta donde se alojan los datos
    path = directorio + ric + '.csv' #se genera una funcion dond esta la ruta, el nombre del archivo y su fomrato
    raw_data = pd.read_csv(path) #carga un data frame, tipo csv asignado en la funcion path
    t = pd.DataFrame()
    t['fecha']  = pd.to_datetime(raw_data['Date'], dayfirst = False ) 
    t['cierre'] = raw_data['Close']
    t = t.sort_values(by='fecha', ascending=True)
    t['close_previous'] = t['cierre'].shift(1)
    t ['rendimiento'] = t['cierre']/t['close_previous'] - 1
    t = t.dropna()
    t = t.reset_index(drop=True)
    return t

# Llamar a la funci√≥n para obtener las series temporales de los activos
benchmark_performance = series_tiempo(benchmark)  # Rendimiento del benchmark
security_performance = series_tiempo(security)  # Rendimiento de la seguridad

#para reflejar los datos en dataframes
print("Benchmark Performance ", benchmark)
benchmark_performance.head()

print("Security Performance ", security)
security_performance.head()

###############################################################################

#serie de tiempo de benchmark
benchmark_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='blue',
       label=benchmark, title='Serie de tiempo de precio cierre de ' + benchmark)
plt.show()

#serie de tiempo de security
security_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='green',
       label=security, title='Serie de tiempo de precio cierre de ' + security)
plt.show()

###############################################################################
#para ver los valores especificos de una variable

benchmark_values=list(benchmark_performance['fecha'].values)
securities_values=list(security_performance['fecha'].values)

###############################################################################
#para filtrar datos en pandas / igualar las variables con los mismos valores

series_de_tiempo = list(set(benchmark_values)& set(securities_values))

serie_x = benchmark_performance[benchmark_performance['fecha'].isin(benchmark_values)]
serie_x = serie_x.sort_values(by='fecha', ascending=True)
serie_x =serie_x.reset_index(drop=True)


serie_y = security_performance[security_performance['fecha'].isin(securities_values)]
serie_y = serie_y.sort_values(by='fecha', ascending=True)
serie_y =serie_y.reset_index(drop=True)

#se crea un data frame del las series de tiempo / los dataframes de pandas se llaman con el nombre de la columna
series_de_tiempo = pd.DataFrame() #se crea un data frame vacio 
#donde se le agregan las variables de los otros cuadros previamente creados
series_de_tiempo ['fecha'] = serie_x['fecha']
series_de_tiempo['cierre_x'] = serie_x['cierre']
series_de_tiempo['cierre_y'] = serie_y['cierre']
series_de_tiempo['rendimiento_x'] = serie_x['rendimiento']
series_de_tiempo['rendimiento_y'] = serie_y['rendimiento']

#hacer una time series sincronizadas, con las columnas cierre, retornos, fecha
#para hacer el plot de las variables unidas en un solo grafico

#grafica de la serie de tiempo conjunta
plt.figure(figsize=(12,5))
plt.title('serie de tiempo de precios de cierre')
plt.xlabel('tiempo')
plt.ylabel('precios')
ax = plt.gca()

#se definen los ejes ax1 para el benchmark / ax2 para el activo a comparar
ax1 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_x', ax=ax, grid= True, \
                            color= 'red', label=benchmark)
     
ax2 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_y', ax=ax, grid= True, \
                            color= 'black', secondary_y=True, label=security)
#se grafican
ax.legend(loc=2)
ax2.legend(loc=1)
plt.show()

#S&P500 comparado con su indice de volatilidad (^SPX) / VIX (volatilidad con volatilidad es enorme, correlacion es negativa), por lo que el beta es muy grande
#volatilidad del VIX es mucho mas grande que el S&P500
#comparar IPC-BMV / MSCI tracker MXN / NAFTRAC / indice manufacutrero. (EWW)
#comparar divisas USD-MXN /  EUR/USD con MXN/USD , paridad cambiaria.

"VIX es el indice de volatilidad de las opciones del S&P500, cuando los activos suben las opciones se encarecen"
"pero al depreciarse, el valor de las opciones, la gente compra puts como proteccion, haciendo un incremento de volatilidad "
"la volatilidad es inversamente proporcional a los precios"
"Cuando los precios caen aumenta enormentemente la volatilidad (crisis financiera)"
"Cuando los precios suben la volatilidad no sube mucho porque crecen como una recta, solo si es una noticia que afecta mucho el precio "
"S&P precios suben no hay grandes caidas, pero cuando caen hay mucha mas inestabilidad con grades caidas y recuperaciones"

