
# Código para Tesis
# Encontrar las correlaciones sectoriales de cada sector con el del Índice Bursátil

###############################################################################
# Sectores de los ETFs (S&P500 Tracker: SPY)
# S&P500 - Technology Sector - XLK
# S&P500 - Financial Sector - XLF
# S&P500 - Health Care Sector - XLV
# S&P500 - Energy Sector - XLE
# S&P500 - Communication - XLC
# S&P500 - Consumer Discretionary Sector - XLY
# S&P500 - Consumer Staples Sector - XLP
# S&P500 - Industrial Sector - XLI
# S&P500 - Materials Sector - XLB
# S&P500 - Real Estate Sector - XLRE
# S&P500 - Utilities Sector - XLU

###############################################################################
# Empresas tecnológicas más representativas

# Apple - AAPL
# Microsoft - MSFT
# Nvidia - NVDA
# Amazon - AMZN
# Alphabet - GOOG

###############################################################################
# Sectores de los ETFs (IPC-BMV Tracker)
# EWW ISHARES MSCI Mexico ETF / NYSE
# NAFTRAC.MX ISHARES NAFTRAC / Nacional Financiera S.N.C. / Impulsora y Black Rock Mexico

###############################################################################
# Librerías importantes
import numpy as np  # Conocer bien la librería
import pandas as pd  # Conocer bien la librería
import matplotlib.pyplot as plt  # Conocer bien la librería
import scipy.stats as st  # Conocer bien la librería
import importlib

###############################################################################
# Para la regresión lineal
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Para el CAPM se necesitan dos series de tiempo y una sincronización de las mismas
# También se usa para la matriz de covarianza y varianza.

###############################################################################
# Comparación de activos: Definir los activos (ric) y el benchmark
# security = '^MXN' (benchmark)
security = "NAFTRAC"  # Activo a analizar
benchmark = "SPY2"  # Índice de referencia

###############################################################################
# Definir el directorio donde se encuentran los archivos CSV
directorio = 'C:\\Users\\creep\\.spyder-py3\\stocks\\'

# Función para cargar y procesar los datos de los activos
def series_tiempo(ric):
    path = directorio + ric + '.csv'  # Ruta del archivo CSV
    raw_data = pd.read_csv(path)  # Cargar los datos en un DataFrame
    t = pd.DataFrame()
    t['fecha'] = pd.to_datetime(raw_data['Date'], dayfirst=False)  # Convertir fecha
    t['cierre'] = raw_data['Price']  # Precio de cierre
    t = t.sort_values(by='fecha', ascending=True)  # Ordenar por fecha
    t['close_previous'] = t['cierre'].shift(1)  # Desplazar los precios de cierre
    t['rendimiento'] = t['cierre'] / t['close_previous'] - 1  # Calcular rendimiento
    t = t.dropna()  # Eliminar valores nulos
    t = t.reset_index(drop=True)  # Resetear índices
    return t

# Obtener las series temporales de los activos
benchmark_performance = series_tiempo(benchmark)  # Rendimiento del benchmark
security_performance = series_tiempo(security)  # Rendimiento de la seguridad

# Mostrar las primeras filas de los DataFrames
print("Benchmark Performance ", benchmark)
benchmark_performance.head()
print("Security Performance ", security)
security_performance.head()

###############################################################################
# Graficar las series de tiempo

# Gráfico para el benchmark
benchmark_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='blue',
                           label=benchmark, title='Serie de tiempo de precio de cierre de ' + benchmark)
plt.show()

# Gráfico para el activo a analizar
security_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='green',
                          label=security, title='Serie de tiempo de precio de cierre de ' + security)
plt.show()

###############################################################################
# Sincronizar las fechas de ambos activos
benchmark_values = list(benchmark_performance['fecha'].values)
security_values = list(security_performance['fecha'].values)

# Filtrar las fechas comunes entre ambos activos
common_dates = list(set(benchmark_values) & set(security_values))

# Filtrar las series de tiempo para mantener solo las fechas comunes
serie_x = benchmark_performance[benchmark_performance['fecha'].isin(common_dates)]
serie_x = serie_x.sort_values(by='fecha', ascending=True).reset_index(drop=True)

serie_y = security_performance[security_performance['fecha'].isin(common_dates)]
serie_y = serie_y.sort_values(by='fecha', ascending=True).reset_index(drop=True)

# Crear un DataFrame con las series de tiempo sincronizadas
series_de_tiempo = pd.DataFrame()
series_de_tiempo['fecha'] = serie_x['fecha']
series_de_tiempo['cierre_x'] = serie_x['cierre']
series_de_tiempo['cierre_y'] = serie_y['cierre']
series_de_tiempo['rendimiento_x'] = serie_x['rendimiento']
series_de_tiempo['rendimiento_y'] = serie_y['rendimiento']

# Graficar ambos activos en un solo gráfico
plt.figure(figsize=(12, 5))
plt.title('Serie de tiempo de precios de cierre')
plt.xlabel('Tiempo')
plt.ylabel('Precios')
ax = plt.gca()

ax1 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_x', ax=ax, grid=True, color='red', label=benchmark)
ax2 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_y', ax=ax, grid=True, color='black', secondary_y=True, label=security)

# Mostrar leyendas
ax.legend(loc=2)
ax2.legend(loc=1)
plt.show()

###############################################################################
# Regresión lineal
x = series_de_tiempo['rendimiento_x'].values
y = series_de_tiempo['rendimiento_y'].values
slope, intercept, r_value, p_value, std_err = st.linregress(x, y)

# Mostrar los resultados de la regresión
print("Pendiente (Beta):", slope)
print("Intersección (Alfa):", intercept)
print("Coeficiente de correlación (r):", r_value)
print("Valor p:", p_value)
print("Error estándar:", std_err)

# Asignación de valores de la regresión
beta = np.round(slope, 5)
alpha = np.round(intercept, 5)
correlacion = np.round(r_value, 5)
p = np.round(p_value, 5)
error_estandar = np.round(std_err, 5)
r_cuadrada = np.round(r_value ** 2, 5)

# Predicción de la regresión lineal
prediccion_regresion_lineal = alpha + beta * x
hipotesis_nula = p_value > 0.05  # Si p_value es menor a 0.05, se rechaza la hipótesis nula

# Mostrar resultados
print(f"La pendiente (Beta) es {beta}")
print(f"La correlación entre ambos es {correlacion}")
print(f"El modelo se explica en un {r_cuadrada} con respecto a la volatilidad")
print(f"El valor p es {p_value}")
print(f"El error estándar es {error_estandar}")
print(f"El valor alfa es {alpha}")
print(f"La hipótesis nula es {hipotesis_nula}")

titulo_grafica = 'Regresión lineal del activo ' + security  \
   + ' | benchmark ' + benchmark + '\n' \
   + ' alfa (intercepto) ' + str(alpha)  \
   + ' | beta (pendiente) ' + str(beta) + '\n'  \
   + ' p-value ' + str(p_value) + \
   ' | hipótesis nula ' + str(hipotesis_nula) + '\n'  \
   + ' r-cuadrada ' + str(r_cuadrada)  \
   + ' | correlación ' + str(correlacion)


# Graficar la regresión lineal
plt.figure()
plt.title(titulo_grafica)
plt.scatter(x, y)
plt.plot(x, prediccion_regresion_lineal, color='black')
plt.ylabel(security)
plt.xlabel(benchmark)
plt.grid()
plt.show()

###############################################################################
# Para hacer zoom en el periodo de 2019-2023

# Filtrar datos entre 2019 y 2023
def series_tiempo_filtrada(ric):
    path = directorio + ric + '.csv'
    raw_data = pd.read_csv(path)
    t = pd.DataFrame()
    t['fecha'] = pd.to_datetime(raw_data['Date'], dayfirst=False)
    t['cierre'] = raw_data['Price']
    t = t.sort_values(by='fecha', ascending=True)
    t['close_previous'] = t['cierre'].shift(1)
    t['rendimiento'] = t['cierre'] / t['close_previous'] - 1
    t = t.dropna()
    t = t.reset_index(drop=True)
    
    # Filtrar por fechas de 2019 a 2023
    t = t[(t['fecha'].dt.year >= 2019) & (t['fecha'].dt.year <= 2023)]
    return t

# Obtener las series filtradas para los activos
benchmark_performance = series_tiempo_filtrada(benchmark)
security_performance = series_tiempo_filtrada(security)

# Graficar los datos entre 2019 y 2023 para el benchmark
benchmark_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='blue', label=benchmark, title=f'Precio de Cierre {benchmark}')
plt.show()

# Graficar los datos entre 2019 y 2023 para la seguridad
security_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='green', label=security, title=f'Precio de Cierre {security}')
plt.show()

# Sincronizar las fechas de los activos
series_de_tiempo = pd.DataFrame()
series_de_tiempo['fecha'] = benchmark_performance['fecha']
series_de_tiempo['cierre_x'] = benchmark_performance['cierre']
series_de_tiempo['cierre_y'] = security_performance['cierre']
series_de_tiempo['rendimiento_x'] = benchmark_performance['rendimiento']
series_de_tiempo['rendimiento_y'] = security_performance['rendimiento']

# Graficar ambos activos en un solo gráfico entre 2019 y 2023
plt.figure(figsize=(12, 5))
plt.title('Serie de tiempo de precios de cierre (2019-2023)')
plt.xlabel('Tiempo')
plt.ylabel('Precios')
ax = plt.gca()

ax1 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_x', ax=ax, grid=True, color='red', label=benchmark)
ax2 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_y', ax=ax, grid=True, color='blue', secondary_y=True, label=security)

# Mostrar leyendas
ax.legend(loc=2)
ax2.legend(loc=1)
plt.show()




