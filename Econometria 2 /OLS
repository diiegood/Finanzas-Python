#segunda practica econometria python.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
import statsmodels.formula.api as stm
from statsmodels.graphics.regressionplots import abline_plot
import requests #para leer un codigo de una pagina
from io import StringIO #para convertir un contenido de un dataframe a pandas

#para cargar una pagina web con los datos
consumo = pd.read_csv('https://raw.githubusercontent.com/vmoprojs/DataLectures/master/GA/Tabla3_2.csv', sep = ';',decimal = '.')

   
media_x = np.mean(consumo["X"]) #se calcula de la variable x el consumo
media_y = np.mean(consumo["Y"]) #se calcula de la variable y el consumo

numero_filas = consumo.shape[0] #para poder ver el numero de filas del array
#tiene 10 filas 

#para calcular la suma de los cuadrados de los valores de un data frame se usa pandas
suma_cuadrados_x = np.sum( consumo['X'] * consumo['X'])
suma_x_y = np.sum(consumo['X']* consumo['Y'])

#para calcular el coeficiente de regresion Beta 1  (regresion simple)
beta_som = (suma_x_y - numero_filas * media_x * media_y ) / (suma_cuadrados_x - numero_filas * (media_x ** 2)) 
#para calcular la beta 0 que es el intercepto de ecuacion de regresion simple (valor y cuando x = 0)
alpha_som = media_y - beta_som * media_x
#alpha_som > 0 linea regresiva tiene valor positivo / aplha_som < 0 linea valor negativo / alpha_som = 0 linea pasa por el origen
(alpha_som , beta_som)

#alpha_som = intercepto de la Bo (recta de la regresion)
#beta_som = coeficiente de la pendiente de B1 (beta 1)
#Y = Bo + B1 X  (ecuacion de la regresion)

#para hacer un modelo de regresion lineal, donde Y es dependiente de X , de los datos de consumo
regresion1 =  stm.ols('Y~X', data = consumo)
print(regresion1.fit().summary()) #para ver los resultados del modelo de regresion.

###############################################################################
"Como leer los resultados"
###############################################################################
"Durbin Watson" #Se usa para poder ver la autocorrelacion de residuos del modelo de regresion, donde ocurren los
#erores de observacion estan correlacionados con los errores de la otra observacion.
#valor ccercano a 2, no hay correlacion significativa entre residuos.
#valor menor a 2, significa que la correlacion es positva, los errores tienen una tendencia simialr
#valor mayor a 2, indica autocorrelacion negativa, errores inversamente relacionados.

###############################################################################

"F estadistico" #Es usado para la prueba global del modelo, donde dice si el modelo en su conjunto explica
#significativamente la variabilidad de la variable dependiente en comparacion con un modelo de variables independientes
#F-estadistico alto valor,   modelo es significativo, una de las dos explicativas, tiene efectivo significativo
#sobre la variable dependidente
#F-estadistico bajo valor, suguiere que las variables del modelo no son relevantes, no explica bien la 
#variabilidad de la variable dependiente

###############################################################################

"Prob F estadistico" #La probabilidad del F- estadistico,  es el p-value correspondiente a  la prueba global,
#del modelo, mide la probabilidad de obtener un valor F- estadistico igual o mas extremo que el observado, bajo
#la hipotesis nula.
#P-value bajo (menor a 0.05) que al menos una variable es significativa.
#p-value alto (mayor a 0.05) las variables explicativas no tienen efecto significativo

###############################################################################

"Residuos" #Son diferentes a los valores observados de la variable dependiente y los
#valores predichos por el modelo, son utiles para ver los supuestos de los modelos, como la homocedasticidad.
#Si tienen distribucion aleatoria el modelo es adecuado
#Si tienen patrones sistematicos , es posible que el modelo no este ajustado correctamente y se deban
#agreagar mas variables o cambiar el tipo de modelo.

###############################################################################

"Covarianza" #Mide la relacion lineal entre dos variables, donde el modelo de regresion, se refiere a que la 
#relacion entre errores y residuos de las variables explicativas y la dependiente.
#Covarianza alta,  entre la variable independiente y residuos, dice que la variable esta realcionada
#de manera no lineal o el modelo requiere ajustes.
#####Los residuos no deben tener correlacion entre variables explicativas######

###############################################################################

"Jarque Bera" #se usa para ver la normalidad de los resiudos, compara la asimetria y la curtosis,
#donde ve si tiende a la normal.
#p-value menor a  0.05 indica que los residuos no siguen la normal (rechazo de hipotesis nula).
#p-value mayor a 0.05 indica que los residuos se consideran que tiende a la normal

###############################################################################

"Omnibus" #Evalua la normalidad de los residuos, pero es mas general el test que
#combina la informacion sobre la asimetria y la curtosis de los residuos para hacer
#conjunta la normalidad. (se mide parecido a l jarque bera)
#p value menor a 0.05 indica que los residuos no siguen la normal
#p value mayor a 0.05 no dice que hay evidencia suficiente para rechazar la normalidad.

###############################################################################

y_ajustado = alpha_som + beta_som *  consumo ['X']

dfAux = pd.DataFrame(list(zip(consumo['X'], y_ajustado)), columns=['X', 'y_ajustado'] )
dfAux

#calcular los residuos
e = consumo['Y'] - y_ajustado
dfAux = pd.DataFrame(list(zip(consumo['X'],consumo['Y'], y_ajustado, e )), columns=['X','Y', 'e','y_ajustado'] )
dfAux

#calcular la media 
np.mean(e)
np.corrcoef(e,consumo['X']) 

#####################################################################################
#Suma de cuadrados.
SCT = np.sum((consumo['Y']-media_y)**2) #Total
SCE = np.sum((y_ajustado-media_y)**2)   #Residuos
SCR = np.sum(e**2)                      #Regresion


#para calcular la R^2 / que tanto se ajusta el modelo.
R_2 = SCE/SCT 
R_2

print(regresion1.fit().summary())  #valores del modelo
