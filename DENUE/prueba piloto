"Prueba pesada" ###############################################################

import pandas as pd
import os
import numpy as np
import re


direccion = "J:\\Diego-files\\DENUE-datos\\bases_sucias"
librerias = ["denue_otroservicios1_81_1.csv",
             "denue_otroservicios2_81_2.csv"]

Comercio_al_por_Menor_lista = []

for archivo in librerias:
    lectura_Datos = os.path.join(direccion, archivo) 
    Comercio_al_por_menor1 = pd.read_csv(lectura_Datos, encoding='latin1')
    Comercio_al_por_Menor_lista.append(Comercio_al_por_menor1) #funcion para agregar a la lista vacia los datos
    
 
#se combinan los data frames en uno
Comercio_al_por_Mayor = pd.concat(Comercio_al_por_Menor_lista, ignore_index=True)
Comercio_al_por_Mayor_original = pd.concat(Comercio_al_por_Menor_lista, ignore_index=True) #copia del data frame original

Comercio_al_por_Menor.head(45)  # primeros 45 valores
Comercio_al_por_Menor.tail(45)  # últimos 45 valores
Comercio_al_por_Menor.dtypes  # ver tipo de datos
Comercio_al_por_Menor.isnull().values.any()  # ¿hay nulos?
Comercio_al_por_Menor.columns  # columnas del DataFrame
Comercio_al_por_Menor.duplicated().sum()  # filas duplicadas

# Filtrar columnas importantes
Comercio_al_por_Menor = Comercio_al_por_Menor[['clee', 'nom_estab', 'raz_social', 'per_ocu', 'codigo_act', 
                                                'nombre_act', 'entidad', 'municipio', 'id']].fillna(0)

"Para poder conocer el total de las empresas que hay"

###############################################################################
"Modificación del DataFrame"

# Transformaciones de variables
Comercio_al_por_Menor['per_ocu'].unique()
Comercio_al_por_Menor['per_ocu'] = Comercio_al_por_Menor['per_ocu'].replace({'251 y más personas': '251 a 500 personas'})

Comercio_al_por_Menor["codigo_act"] = Comercio_al_por_Menor["codigo_act"].astype(str)
Comercio_al_por_Menor["codigo_act"].unique()

# Crear columnas poblacionales
Comercio_al_por_Menor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Menor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Menor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_minima'], errors='coerce')
Comercio_al_por_Menor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_maxima'], errors='coerce')
Comercio_al_por_Menor["promedio"] = (Comercio_al_por_Menor["poblacion_maxima"] + Comercio_al_por_Menor["poblacion_minima"]) / 2

###############################################################################
"Filtros y agrupaciones"

# Filtro: empresas con razón social válida
Comercio_al_por_Menor = Comercio_al_por_Menor[Comercio_al_por_Menor["raz_social"] != 0]

# Agrupamiento por razón social
Comercio_al_por_Menor = Comercio_al_por_Menor.groupby('raz_social')[['poblacion_minima', 'poblacion_maxima', 'promedio']].sum()

# Columnas no numéricas que no deben sumarse
columnas_agregadas = Comercio_al_por_Menor_original.groupby('raz_social')[['codigo_act', 'nom_estab', 'nombre_act']].first()

# Unión de ambos DataFrames
Comercio_al_por_Menor = Comercio_al_por_Menor.join(columnas_agregadas)

# Estadísticas
estadisticas_dataframe = Comercio_al_por_Menor.describe()

###############################################################################
"Clasificación de empresas según INEGI"

# Microempresas
primera_condicion = (Comercio_al_por_Menor["promedio"] > 0) & (Comercio_al_por_Menor["promedio"] < 11)
micro_empresas = Comercio_al_por_Menor[primera_condicion]

# Pequeñas
primera_condicion = (Comercio_al_por_Menor["promedio"] >= 11) & (Comercio_al_por_Menor["promedio"] <= 50)
pequeñas_empresas = Comercio_al_por_Menor[primera_condicion]

# Medianas
primera_condicion = (Comercio_al_por_Menor["promedio"] > 50) & (Comercio_al_por_Menor["promedio"] <= 250)
medianas_empresas = Comercio_al_por_Menor[primera_condicion]

# Grandes
primera_condicion = Comercio_al_por_Menor["promedio"] > 250
grandes_empresas = Comercio_al_por_Menor[primera_condicion]

###############################################################################
"Comprobación de agrupación"
valores_residuales = pd.concat([micro_empresas, pequeñas_empresas, medianas_empresas, grandes_empresas]).index
valores_residuales = Comercio_al_por_Menor.drop(valores_residuales)
valores_residuales = len(valores_residuales)

###############################################################################
"Transformación a dummies"

Comercio_al_por_Menor["empresa_micro"] = (
    (Comercio_al_por_Menor["promedio"] > 0) & (Comercio_al_por_Menor["promedio"] <= 11)
).astype(int)

Comercio_al_por_Menor["empresa_pequeña"] = (
    (Comercio_al_por_Menor["promedio"] > 11) & (Comercio_al_por_Menor["promedio"] <= 50)
).astype(int)

Comercio_al_por_Menor["empresa_mediana"] = (
    (Comercio_al_por_Menor["promedio"] > 50) & (Comercio_al_por_Menor["promedio"] <= 250)
).astype(int)

Comercio_al_por_Menor["empresa_grande"] = (
    Comercio_al_por_Menor["promedio"] > 250
).astype(int)

"Análisis descriptivo"
print("Los parámetros poblacionales de la variable de población ocupada por empresa son:", Comercio_al_por_Menor['per_ocu'].unique())

###############################################################################
import openpyxl

# Comprobación de duplicados
duplicados = Comercio_al_por_Menor.duplicated(keep=False)

###############################################################################
"Exportar a Excel"

# Ruta de salida
ruta_salida = "J:\\Diego-files\\DENUE-datos\\bases_sucias\\Prueba_Piloto.xlsx"

# Exportar varias hojas en un mismo archivo
with pd.ExcelWriter(ruta_salida, engine='openpyxl') as writer:
    grandes_empresas.to_excel(writer, sheet_name='Grandes Empresas', index=True)
    medianas_empresas.to_excel(writer, sheet_name='Medianas Empresas', index=True)
    pequeñas_empresas.to_excel(writer, sheet_name='Pequeñas Empresas', index=True)
    micro_empresas.to_excel(writer, sheet_name='Micro Empresas', index=True)

print("Todos los DataFrames se exportaron exitosamente a hojas separadas en:", ruta_salida)





