"Denue datos"  

###############################################################################

"Universo muestral del total de todos los conjuntos de los datos"
#la carga computacional es demasiado extensa por lo que no se puede trabajar en conjunto con ellos.

import pandas as pd
import os
import dask.dataframe as dd #para manejo de grandes cantidades de datos mas eficientes que pandas:

directorio = "J:\Diego-files\\DENUE-datos\\"

#corregir librerias
sectores = [
    "denue_Actgobierno_93.csv",
    "denue_Agricultura_11.csv",
    "denue_comercioalpormayor_43.csv",
    "denue_comercioalpormenor1_46111.csv",
    "denue_comercioalpormenor2_46112-46311.csv",
    "denue_comercioalpormenor3_46321-46531.csv",
    "denue_comercioalpormenor4_46591-46911.csv",
    "denue_construccion_23.csv",
    "denue_corporativos_55.csv",
    "denue_generacionenergia_22.csv",
    "denue_industriasmanufactureras_31-33.csv",
    "denue_informacionenmediosmasivos_51.csv",
    "denue_mineria_21.csv",
    "denue_otroservicios1_81_1.csv",
    "denue_otroservicios2_81_2.csv",
    "denue_serviciosalojamiento1_72_1.csv",
    "denue_serviciosalojamiento2_72_2.csv",
    "denue_serviciosalud_62.csv",
    "denue_serviciosapoyonegocios_56.csv",
    "denue_servicioseducativos_61.csv",
    "denue_serviciosesparcimiento_71.csv",
    "denue_serviciosfinancieros_52.csv",
    "denue_serviciosinmobiliarios_53.csv",
    "denue_serviciosprofesionales_54.csv",
    "denue_transportescorreosalmacenamiento_48-49.csv"]

dataframes = []

for archivo in sectores:
    path = os.path.join(directorio, archivo)
    df = pd.read_csv(path, encoding='latin1') #para leer datos con ñ / cambiar a pd para pandas y dd para dask
    df["sector"] = archivo.replace("denue_", "").replace(".csv", "") #se agrega una columna que indique el sector
    dataframes.append(df)
    
raw_data = pd.concat(dataframes, ignore_index=True); raw_data #cambiar a dd 
raw_data.head()
raw_data.shape

###############################################################################
###############################################################################
###############################################################################

"Analisis de empresas por sector"

###############################################################################
###############################################################################
###############################################################################
#1er sector Agricultura

import pandas as pd
import os
import numpy as np
import re


direccion = "J:\\Diego-files\\DENUE-datos\\"
libreria = "denue_Agricultura_11.csv"
lectura_Datos = os.path.join(direccion, libreria)

#para conocer las caracteristicas generales de la matriz y la lectura de los datos en codigo que acepte ñ
Agricultura = pd.read_csv(lectura_Datos, encoding='latin1')
Agricultura.head(30)
Agricultura.dtypes #ver tipo de datos de cada variable del data frame
Agricultura.isnull().values.any() #ver si hay alguna columna con un valor nulo
Agricultura.columns #muestra las columnas 
Agricultura.duplicated().sum() #para ver si hay filas duplicadas

#para mostrar las empresas del sector Agropecuario sin repetir 
Agricultura = Agricultura[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)#se usa unique cuando es una columna y drop_duplicates si son varias
Agricultura[['poblacion_minima', 'poblacion_maxima']] = Agricultura['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Agricultura.drop(columns = 'per_ocu', inplace = True) #elimina la columna de poblacion


Agricultura['poblacion_minima'] = pd.to_numeric(Agricultura['poblacion_minima'], errors='coerce')
Agricultura['poblacion_maxima'] = pd.to_numeric(Agricultura['poblacion_maxima'], errors='coerce')
# Agrupar por nombre de establecimiento y sumar las poblaciones
poblacion_total_Agricultura = (Agricultura.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())

#para juntar todos los datos de la poblacion que correspondan a una sola entidad
poblacion_total_Agricultura = Agricultura.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Agricultura

#Para conocer el total de las empresas que pertenecen a ese conjunto.
empresas_Agricultura = Agricultura['nom_estab'].drop_duplicates() 
empresas_Agricultura = len(empresas_Agricultura) #calcular las empresas unicas

#descripcion de los datos 
"hacer un diccionario con cada sector que contenga clave de sector subclaves, total de empresas"
print('Sector Agropecuario')
print('Total de empresas es de', empresas_Agricultura  )  #para imprimir cuantas empresas son
print('clave del sector va de', 11, 'con subsectores de', 111, 'hasta', 115 )

###############################################################################
#2do sector Mineria

libreria = "denue_mineria_21.csv"
lectura_Datos = os.path.join(direccion, libreria)
Mineria = pd.read_csv(lectura_Datos, encoding='latin1')
Mineria.head(30)
Mineria.dtypes #ver tipo de datos de cada variable del data frame
Mineria.isnull().values.any() #ver si hay alguna columna con un valor nulo
Mineria.columns #muestra las columnas 
Agricultura.duplicated().sum()

Mineria = Mineria[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Mineria[['poblacion_minima', 'poblacion_maxima']] = Mineria['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Mineria.drop(columns = 'per_ocu', inplace = True) 
Mineria['poblacion_minima'] = pd.to_numeric(Mineria['poblacion_minima'], errors='coerce')
Mineria['poblacion_maxima'] = pd.to_numeric(Mineria['poblacion_maxima'], errors='coerce')
poblacion_total_Mineria = (Mineria.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Mineria = Mineria.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Mineria


empresas_Mineria = Mineria['nom_estab'].drop_duplicates() 
empresas_Mineria= len(empresas_Mineria)

print('Sector Minero')
print('Total de empresas es de', empresas_Mineria  )  
print('clave del sector va de', 21, 'con subsectores de', 211, 'hasta', 213 )

###############################################################################
#3er sector  Sector de Generacion de Energia

libreria = "denue_generacionenergia_22.csv"
lectura_Datos = os.path.join(direccion, libreria)
Generacion_energia = pd.read_csv(lectura_Datos, encoding='latin1')
Generacion_energia.head(30)
Generacion_energia.dtypes #ver tipo de datos de cada variable del data frame
Generacion_energia.isnull().values.any() #ver si hay alguna columna con un valor nulo
Generacion_energia.columns #muestra las columnas 
Generacion_energia.duplicated().sum() 

Generacion_energia = Generacion_energia[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Generacion_energia[['poblacion_minima', 'poblacion_maxima']] = Generacion_energia['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Generacion_energia.drop(columns = 'per_ocu', inplace = True) 
Generacion_energia['poblacion_minima'] = pd.to_numeric(Generacion_energia['poblacion_minima'], errors='coerce')
Generacion_energia['poblacion_maxima'] = pd.to_numeric(Generacion_energia['poblacion_maxima'], errors='coerce')
poblacion_total_Generacion_energia = (Generacion_energia.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Generacion_energia = Generacion_energia.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Generacion_energia


empresas_Generacion_energia = Generacion_energia['nom_estab'].drop_duplicates() 
empresas_Generacion_energia= len(empresas_Generacion_energia)

print('Sector Generacion de energia')
print('Total de empresas es de', empresas_Generacion_energia  )  #para imprimir cuantas empresas son
print('clave del sector va de', 22, 'con subsector de', 221 )

###############################################################################
#4to sector  Sector de Construccion

libreria = "denue_construccion_23.csv"
lectura_Datos = os.path.join(direccion, libreria)
Construccion = pd.read_csv(lectura_Datos, encoding='latin1')
Construccion.head(30)
Construccion.dtypes #ver tipo de datos de cada variable del data frame
Construccion.isnull().values.any() #ver si hay alguna columna con un valor nulo
Construccion.columns #muestra las columnas 
Construccion.duplicated().sum()

Construccion = Construccion[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Construccion[['poblacion_minima', 'poblacion_maxima']] = Construccion['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Construccion.drop(columns = 'per_ocu', inplace = True) 
Construccion['poblacion_minima'] = pd.to_numeric(Construccion['poblacion_minima'], errors='coerce')
Construccion['poblacion_maxima'] = pd.to_numeric(Construccion['poblacion_maxima'], errors='coerce')
poblacion_total_Construccion = (Construccion.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Construccion = Construccion.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Construccion


empresas_Construccion = Construccion['nom_estab'].drop_duplicates() 
empresas_Construccion= len(empresas_Construccion)


print('Sector Generacion de Construccion')
print('Total de empresas es de', empresas_Construccion  )  #para imprimir cuantas empresas son
print('clave del sector va de', 23, 'con subsector de', 236, 'hasta', 238 )

###############################################################################
#5to sector  Sector de Industria Manufacturera

libreria = "denue_industriasmanufactureras_31-33.csv"
lectura_Datos = os.path.join(direccion, libreria)
Industria_Manufacturera = pd.read_csv(lectura_Datos, encoding='latin1')
Industria_Manufacturera.head(30)
Industria_Manufacturera.dtypes #ver tipo de datos de cada variable del data frame
Industria_Manufacturera.isnull().values.any() #ver si hay alguna columna con un valor nulo
Industria_Manufacturera.columns #muestra las columnas 
Industria_Manufacturera.duplicated().sum()

Industria_Manufacturera = Industria_Manufacturera[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Industria_Manufacturera[['poblacion_minima', 'poblacion_maxima']] = Industria_Manufacturera['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Industria_Manufacturera.drop(columns = 'per_ocu', inplace = True) 
Industria_Manufacturera['poblacion_minima'] = pd.to_numeric(Industria_Manufacturera['poblacion_minima'], errors='coerce')
Industria_Manufacturera['poblacion_maxima'] = pd.to_numeric(Industria_Manufacturera['poblacion_maxima'], errors='coerce')
poblacion_total_Industria_Manufacturera = (Industria_Manufacturera.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Industria_Manufacturera = Industria_Manufacturera.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Industria_Manufacturera


empresas_Industria_Manufacturera = Construccion['nom_estab'].drop_duplicates() 
empresas_Industria_Manufacturera= len(empresas_Industria_Manufacturera)


print('Sector Generacion de la Industria_Manufacturera')
print('Total de empresas es de', empresas_Industria_Manufacturera  )  #para imprimir cuantas empresas son
print('clave del sector va de', 31, '-',33,  'con subsector de', 311, 'hasta', 339 )

###############################################################################
#6to sector Sector de la industria de Comercio al por Mayor

libreria = "denue_comercioalpormayor_43.csv"
lectura_Datos = os.path.join(direccion, libreria)
Comercio_al_por_Mayor = pd.read_csv(lectura_Datos, encoding='latin1')
Comercio_al_por_Mayor.head(30)
Comercio_al_por_Mayor.dtypes #ver tipo de datos de cada variable del data frame
Comercio_al_por_Mayor.isnull().values.any() #ver si hay alguna columna con un valor nulo
Comercio_al_por_Mayor.columns #muestra las columnas 
Comercio_al_por_Mayor.duplicated().sum()

Comercio_al_por_Mayor = Comercio_al_por_Mayor[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Comercio_al_por_Mayor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Mayor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Mayor.drop(columns = 'per_ocu', inplace = True) 
Comercio_al_por_Mayor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_minima'], errors='coerce')
Comercio_al_por_Mayor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_maxima'], errors='coerce')
poblacion_total_Comercio_al_por_Mayor = (Comercio_al_por_Mayor.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Comercio_al_por_Mayor = Comercio_al_por_Mayor.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Comercio_al_por_Mayor

empresas_Comercio_al_por_Mayor = Comercio_al_por_Mayor['nom_estab'].drop_duplicates() 
empresas_Comercio_al_por_Mayor = len(empresas_Comercio_al_por_Mayor)

print('Sector Generacion de la Comercio_al_por_Mayor')
print('Total de empresas es de', empresas_Comercio_al_por_Mayor  )  #para imprimir cuantas empresas son
print('clave del sector va de', 43, 'con subsector de', 431, 'hasta', 437 )

###############################################################################
#7mo sector  Comercio al por menor

direccion = "J:\\Diego-files\\DENUE-datos\\"
librerias = ["denue_comercioalpormenor1_46111.csv",
             "denue_comercioalpormenor2_46112-46311.csv",
             "denue_comercioalpormenor3_46321-46531.csv", 
             "denue_comercioalpormenor4_46591-46911.csv" ]

Comercio_al_por_Menor_lista = []

for archivo in librerias:
    lectura_Datos = os.path.join(direccion, archivo) 
    Comercio_al_por_menor1 = pd.read_csv(lectura_Datos, encoding='latin1')
    Comercio_al_por_Menor_lista.append(Comercio_al_por_menor1) #funcion para agregar a la lista vacia los datos
 
#se combinan los data frames en uno
Comercio_al_por_Menor = pd.concat(Comercio_al_por_Menor_lista, ignore_index=True)

Comercio_al_por_Menor.head(45)                         
Comercio_al_por_Menor.dtypes                              
Comercio_al_por_Menor.isnull().any().any()
Comercio_al_por_Menor.columns.tolist()    
Comercio_al_por_Menor.duplicated().sum()

Comercio_al_por_Menor = Comercio_al_por_Menor[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Comercio_al_por_Menor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Menor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Menor.drop(columns = 'per_ocu', inplace = True) 
Comercio_al_por_Menor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_minima'], errors='coerce')
Comercio_al_por_Menor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_maxima'], errors='coerce')
poblacion_total_Comercio_al_por_Menor = (Comercio_al_por_Menor.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Comercio_al_por_Menor = Comercio_al_por_Menor.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Comercio_al_por_Menor

empresas_Comercio_al_por_Menor = Comercio_al_por_Menor['nom_estab'].drop_duplicates() 
empresas_Comercio_al_por_Menor = len(empresas_Comercio_al_por_Menor)

print('Sector Generacion de la Comercio_al_por_Menor')
print('Total de empresas es de', empresas_Comercio_al_por_Menor  )  #para imprimir cuantas empresas son
print('clave del sector va de', 46,'con subsector de', 461, 'hasta', 469)

###############################################################################

#8vo Sector /  Transportes, correos y almancenamiento 

libreria = "denue_transportescorreosalmacenamiento_48-49.csv"
lectura_Datos = os.path.join(direccion, libreria)
Comercio_al_por_Mayor = pd.read_csv(lectura_Datos, encoding='latin1')
Comercio_al_por_Mayor.head(30)
Comercio_al_por_Mayor.dtypes #ver tipo de datos de cada variable del data frame
Comercio_al_por_Mayor.isnull().values.any() #ver si hay alguna columna con un valor nulo
Comercio_al_por_Mayor.columns #muestra las columnas 
Comercio_al_por_Mayor.duplicated().sum()

Comercio_al_por_Mayor = Comercio_al_por_Mayor[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Comercio_al_por_Mayor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Mayor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Mayor.drop(columns = 'per_ocu', inplace = True) 
Comercio_al_por_Mayor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_minima'], errors='coerce')
Comercio_al_por_Mayor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_maxima'], errors='coerce')
poblacion_total_Comercio_al_por_Mayor = (Comercio_al_por_Mayor.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Comercio_al_por_Mayor = Comercio_al_por_Mayor.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Comercio_al_por_Mayor

empresas_Comercio_al_por_Mayor = Comercio_al_por_Mayor['nom_estab'].drop_duplicates() 
empresas_Comercio_al_por_Mayor = len(empresas_Comercio_al_por_Mayor)

print('Sector de Transportes, correos y almacenamiento')
print('Total de empresas es de', empresas_Comercio_al_por_Mayor  )  #para imprimir cuantas empresas son
print('clave del sector va de', 48, '-', 49, 'con subsector de', 481,'-',488, 'hasta', 491, '-',493 )







