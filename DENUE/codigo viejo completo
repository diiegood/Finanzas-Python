"Denue datos"  

###############################################################################
"Funciones de agrupacion"


def matrix_stats (self):
    sector = sector
    self.head = sector.head(30)
    self.dtypes = sector.dtypes #ver tipo de datos de cada variable del data frame
    self.isnull =sector.isnull().values.any() #ver si hay alguna columna con un valor nulo
    self.columns = sector.columns #muestra las columnas 
    sector.duplicated().sum() 

###############################################################################

"Universo muestral del total de todos los conjuntos de los datos"
#la carga computacional es demasiado extensa por lo que no se puede trabajar en conjunto con ellos.

import pandas as pd
import os
import dask.dataframe as dd #para manejo de grandes cantidades de datos mas eficientes que pandas:

directorio = "J:\Diego-files\\DENUE-datos\\"

#corregir librerias
sectores = [
    "denue_Actgobierno_93.csv",
    "denue_Agricultura_11.csv",
    "denue_comercioalpormayor_43.csv",
    "denue_comercioalpormenor1_46111.csv",
    "denue_comercioalpormenor2_46112-46311.csv",
    "denue_comercioalpormenor3_46321-46531.csv",
    "denue_comercioalpormenor4_46591-46911.csv",
    "denue_construccion_23.csv",
    "denue_corporativos_55.csv",
    "denue_generacionenergia_22.csv",
    "denue_industriasmanufactureras_31-33.csv",
    "denue_informacionenmediosmasivos_51.csv",
    "denue_mineria_21.csv",
    "denue_otroservicios1_81_1.csv",
    "denue_otroservicios2_81_2.csv",
    "denue_serviciosalojamiento1_72_1.csv",
    "denue_serviciosalojamiento2_72_2.csv",
    "denue_serviciosalud_62.csv",
    "denue_serviciosapoyonegocios_56.csv",
    "denue_servicioseducativos_61.csv",
    "denue_serviciosesparcimiento_71.csv",
    "denue_serviciosfinancieros_52.csv",
    "denue_serviciosinmobiliarios_53.csv",
    "denue_serviciosprofesionales_54.csv",
    "denue_transportescorreosalmacenamiento_48-49.csv"]

dataframes = []

for archivo in sectores:
    path = os.path.join(directorio, archivo)
    df = pd.read_csv(path, encoding='latin1') #para leer datos con ñ / cambiar a pd para pandas y dd para dask
    df["sector"] = archivo.replace("denue_", "").replace(".csv", "") #se agrega una columna que indique el sector
    dataframes.append(df)
    
raw_data = pd.concat(dataframes, ignore_index=True); raw_data #cambiar a dd 
raw_data.head()
raw_data.shape

###############################################################################
###############################################################################
###############################################################################

"Analisis de empresas por sector"

###############################################################################
###############################################################################
###############################################################################
#1er sector Agricultura

import pandas as pd
import os
import numpy as np
import re

direccion = "J:\\Diego-files\\DENUE-datos\\"
libreria = "denue_Agricultura_11.csv"
lectura_Datos = os.path.join(direccion, libreria)

#para conocer las caracteristicas generales de la matriz y la lectura de los datos en codigo que acepte ñ
Agricultura = pd.read_csv(lectura_Datos, encoding='latin1')
Agricultura.head(30)
Agricultura.dtypes #ver tipo de datos de cada variable del data frame
Agricultura.isnull().values.any() #ver si hay alguna columna con un valor nulo
Agricultura.columns #muestra las columnas 
Agricultura.duplicated().sum() #para ver si hay filas duplicadas

#para mostrar las empresas del sector Agropecuario sin repetir 
Agricultura = Agricultura[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)#se usa unique cuando es una columna y drop_duplicates si son varias
Agricultura[['poblacion_minima', 'poblacion_maxima']] = Agricultura['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Agricultura.drop(columns = 'per_ocu', inplace = True) #elimina la columna de poblacion

Agricultura['poblacion_minima'] = pd.to_numeric(Agricultura['poblacion_minima'], errors='coerce')
Agricultura['poblacion_maxima'] = pd.to_numeric(Agricultura['poblacion_maxima'], errors='coerce')
poblacion_total_Agricultura = (Agricultura.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
Agricultura['Poblacion_promedio'] = Agricultura[['poblacion_minima','poblacion_maxima']].mean (axis=1)

#para juntar todos los datos de la poblacion que correspondan a una sola entidad
poblacion_total_Agricultura = Agricultura.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Agricultura

#Para conocer el total de las empresas que pertenecen a ese conjunto.
empresas_Agricultura = Agricultura['nom_estab'].drop_duplicates() 
empresas_Agricultura = len(empresas_Agricultura) #calcular las empresas unicas

#descripcion de los datos 

print('Sector Agropecuario')
print('Total de empresas es de', empresas_Agricultura  )  #para imprimir cuantas empresas son
print('clave del sector va de', 11, 'con subsectores de', 111, 'hasta', 115 )

###############################################################################
#2do sector Mineria

import pandas as pd
import os
import numpy as np
import re

direccion = "J:\\Diego-files\\DENUE-datos\\"

libreria = "denue_mineria_21.csv"
lectura_Datos = os.path.join(direccion, libreria)
Mineria = pd.read_csv(lectura_Datos, encoding='latin1')
Mineria.head(30)
Mineria.dtypes #ver tipo de datos de cada variable del data frame
Mineria.isnull().values.any() #ver si hay alguna columna con un valor nulo
Mineria.columns #muestra las columnas 
Mineria.duplicated().sum()

Mineria = Mineria[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Mineria[['poblacion_minima', 'poblacion_maxima']] = Mineria['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Mineria.drop(columns = 'per_ocu', inplace = True) 
Mineria['poblacion_minima'] = pd.to_numeric(Mineria['poblacion_minima'], errors='coerce')
Mineria['poblacion_maxima'] = pd.to_numeric(Mineria['poblacion_maxima'], errors='coerce')
poblacion_total_Mineria = (Mineria.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Mineria = Mineria.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Mineria

empresas_Mineria = Mineria['nom_estab'].drop_duplicates() 
empresas_Mineria= len(empresas_Mineria)
print('Sector Minero')
print('Total de empresas es de', empresas_Mineria  )  
print('clave del sector va de', 21, 'con subsectores de', 211, 'hasta', 213 )
# Asegúrate de que los valores estén como números
Mineria['rango_poblacion'] = Mineria['poblacion_maxima'] - Mineria['poblacion_minima']
# Puedes elegir un umbral de diferencia máxima aceptable
umbral = 50  # Cambia este valor según qué tan estricto quieras el filtro
# Filtra los registros con diferencia menor al umbral
Mineria_filtrada = Mineria[Mineria['rango_poblacion'] <= umbral].copy()
# Opcional: elimina la columna de rango si no la necesitas después
# Mineria_filtrada.drop(columns='rango_poblacion', inplace=True)
# Mostrar resultados
print('Registros filtrados con menor diferencia entre población mínima y máxima:')
print(Mineria_filtrada.head())

valores_Mineria = Mineria ["poblacion_maxima", "poblacion_minima" ].unique()
valores_Mineria

filtro_Mineria = Mineria [Mineria["per_ocu"] == "AUDITORIO MUNICIPAL"]
filtro_Mineria

###############################################################################
#3er sector  Sector de Generacion de Energia

libreria = "denue_generacionenergia_22.csv"
lectura_Datos = os.path.join(direccion, libreria)
Generacion_energia = pd.read_csv(lectura_Datos, encoding='latin1')
Generacion_energia.head(30)
Generacion_energia.dtypes #ver tipo de datos de cada variable del data frame
Generacion_energia.isnull().values.any() #ver si hay alguna columna con un valor nulo
Generacion_energia.columns #muestra las columnas 
Generacion_energia.duplicated().sum() 

Generacion_energia = Generacion_energia[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Generacion_energia[['poblacion_minima', 'poblacion_maxima']] = Generacion_energia['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Generacion_energia.drop(columns = 'per_ocu', inplace = True) 
Generacion_energia['poblacion_minima'] = pd.to_numeric(Generacion_energia['poblacion_minima'], errors='coerce')
Generacion_energia['poblacion_maxima'] = pd.to_numeric(Generacion_energia['poblacion_maxima'], errors='coerce')
poblacion_total_Generacion_energia = (Generacion_energia.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Generacion_energia = Generacion_energia.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Generacion_energia


empresas_Generacion_energia = Generacion_energia['nom_estab'].drop_duplicates() 
empresas_Generacion_energia= len(empresas_Generacion_energia)

print('Sector Generacion de energia')
print('Total de empresas es de', empresas_Generacion_energia  )  #para imprimir cuantas empresas son
print('clave del sector va de', 22, 'con subsector de', 221 )

###############################################################################
#4to sector  Sector de Construccion

libreria = "denue_construccion_23.csv"
lectura_Datos = os.path.join(direccion, libreria)
Construccion = pd.read_csv(lectura_Datos, encoding='latin1')
Construccion.head(30)
Construccion.dtypes #ver tipo de datos de cada variable del data frame
Construccion.isnull().values.any() #ver si hay alguna columna con un valor nulo
Construccion.columns #muestra las columnas 
Construccion.duplicated().sum()

Construccion = Construccion[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Construccion[['poblacion_minima', 'poblacion_maxima']] = Construccion['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Construccion.drop(columns = 'per_ocu', inplace = True) 
Construccion['poblacion_minima'] = pd.to_numeric(Construccion['poblacion_minima'], errors='coerce')
Construccion['poblacion_maxima'] = pd.to_numeric(Construccion['poblacion_maxima'], errors='coerce')
poblacion_total_Construccion = (Construccion.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Construccion = Construccion.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Construccion


empresas_Construccion = Construccion['nom_estab'].drop_duplicates() 
empresas_Construccion= len(empresas_Construccion)


print('Sector Generacion de Construccion')
print('Total de empresas es de', empresas_Construccion  )  #para imprimir cuantas empresas son
print('clave del sector va de', 23, 'con subsector de', 236, 'hasta', 238 )

###############################################################################
#5to sector  Sector de Industria Manufacturera

libreria = "denue_industriasmanufactureras_31-33.csv"
lectura_Datos = os.path.join(direccion, libreria)
Industria_Manufacturera = pd.read_csv(lectura_Datos, encoding='latin1')
Industria_Manufacturera.head(30)
Industria_Manufacturera.dtypes #ver tipo de datos de cada variable del data frame
Industria_Manufacturera.isnull().values.any() #ver si hay alguna columna con un valor nulo
Industria_Manufacturera.columns #muestra las columnas 
Industria_Manufacturera.duplicated().sum()

Industria_Manufacturera = Industria_Manufacturera[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Industria_Manufacturera[['poblacion_minima', 'poblacion_maxima']] = Industria_Manufacturera['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Industria_Manufacturera.drop(columns = 'per_ocu', inplace = True) 
Industria_Manufacturera['poblacion_minima'] = pd.to_numeric(Industria_Manufacturera['poblacion_minima'], errors='coerce')
Industria_Manufacturera['poblacion_maxima'] = pd.to_numeric(Industria_Manufacturera['poblacion_maxima'], errors='coerce')
poblacion_total_Industria_Manufacturera = (Industria_Manufacturera.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Industria_Manufacturera = Industria_Manufacturera.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Industria_Manufacturera


empresas_Industria_Manufacturera = Construccion['nom_estab'].drop_duplicates() 
empresas_Industria_Manufacturera= len(empresas_Industria_Manufacturera)


print('Sector Generacion de la Industria_Manufacturera')
print('Total de empresas es de', empresas_Industria_Manufacturera  )  #para imprimir cuantas empresas son
print('clave del sector va de', 31, '-',33,  'con subsector de', 311, 'hasta', 339 )

###############################################################################
#6to sector Sector de la industria de Comercio al por Mayor

libreria = "denue_comercioalpormayor_43.csv"
lectura_Datos = os.path.join(direccion, libreria)
Comercio_al_por_Mayor = pd.read_csv(lectura_Datos, encoding='latin1')
Comercio_al_por_Mayor.head(30)
Comercio_al_por_Mayor.dtypes #ver tipo de datos de cada variable del data frame
Comercio_al_por_Mayor.isnull().values.any() #ver si hay alguna columna con un valor nulo
Comercio_al_por_Mayor.columns #muestra las columnas 
Comercio_al_por_Mayor.duplicated().sum()

Comercio_al_por_Mayor = Comercio_al_por_Mayor[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Comercio_al_por_Mayor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Mayor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Mayor.drop(columns = 'per_ocu', inplace = True) 
Comercio_al_por_Mayor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_minima'], errors='coerce')
Comercio_al_por_Mayor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Mayor['poblacion_maxima'], errors='coerce')
poblacion_total_Comercio_al_por_Mayor = (Comercio_al_por_Mayor.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Comercio_al_por_Mayor = Comercio_al_por_Mayor.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Comercio_al_por_Mayor

empresas_Comercio_al_por_Mayor = Comercio_al_por_Mayor['nom_estab'].drop_duplicates() 
empresas_Comercio_al_por_Mayor = len(empresas_Comercio_al_por_Mayor)

print('Sector Generacion de la Comercio_al_por_Mayor')
print('Total de empresas es de', empresas_Comercio_al_por_Mayor  )  #para imprimir cuantas empresas son
print('clave del sector va de', 43, 'con subsector de', 431, 'hasta', 437 )

###############################################################################
#7mo sector  Comercio al por menor

direccion = "J:\\Diego-files\\DENUE-datos\\"
librerias = ["denue_comercioalpormenor1_46111.csv",
             "denue_comercioalpormenor2_46112-46311.csv",
             "denue_comercioalpormenor3_46321-46531.csv", 
             "denue_comercioalpormenor4_46591-46911.csv" ]

Comercio_al_por_Menor_lista = []

for archivo in librerias:
    lectura_Datos = os.path.join(direccion, archivo) 
    Comercio_al_por_menor1 = pd.read_csv(lectura_Datos, encoding='latin1')
    Comercio_al_por_Menor_lista.append(Comercio_al_por_menor1) #funcion para agregar a la lista vacia los datos
 
#se combinan los data frames en uno
Comercio_al_por_Menor = pd.concat(Comercio_al_por_Menor_lista, ignore_index=True)

Comercio_al_por_Menor.head(45)                         
Comercio_al_por_Menor.dtypes                              
Comercio_al_por_Menor.isnull().any().any()
Comercio_al_por_Menor.columns.tolist()    
Comercio_al_por_Menor.duplicated().sum()

Comercio_al_por_Menor = Comercio_al_por_Menor[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Comercio_al_por_Menor[['poblacion_minima', 'poblacion_maxima']] = Comercio_al_por_Menor['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Comercio_al_por_Menor.drop(columns = 'per_ocu', inplace = True) 
Comercio_al_por_Menor['poblacion_minima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_minima'], errors='coerce')
Comercio_al_por_Menor['poblacion_maxima'] = pd.to_numeric(Comercio_al_por_Menor['poblacion_maxima'], errors='coerce')
poblacion_total_Comercio_al_por_Menor = (Comercio_al_por_Menor.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Comercio_al_por_Menor = Comercio_al_por_Menor.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Comercio_al_por_Menor

empresas_Comercio_al_por_Menor = Comercio_al_por_Menor['nom_estab'].drop_duplicates() 
empresas_Comercio_al_por_Menor = len(empresas_Comercio_al_por_Menor)

print('Sector Generacion de la Comercio_al_por_Menor')
print('Total de empresas es de', empresas_Comercio_al_por_Menor  )  #para imprimir cuantas empresas son
print('clave del sector va de', 46,'con subsector de', 461, 'hasta', 469)

###############################################################################
#8vo Sector /  Transportes, correos y almancenamiento 

libreria = "denue_transportescorreosalmacenamiento_48-49.csv"
lectura_Datos = os.path.join(direccion, libreria)
Transportes_Correos_Almacenamiento = pd.read_csv(lectura_Datos, encoding='latin1')
Transportes_Correos_Almacenamiento.head(30)
Transportes_Correos_Almacenamiento.dtypes #ver tipo de datos de cada variable del data frame
Transportes_Correos_Almacenamiento.isnull().values.any() #ver si hay alguna columna con un valor nulo
Transportes_Correos_Almacenamiento.columns #muestra las columnas 
Transportes_Correos_Almacenamiento.duplicated().sum()

Transportes_Correos_Almacenamiento = Transportes_Correos_Almacenamiento[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Transportes_Correos_Almacenamiento[['poblacion_minima', 'poblacion_maxima']] = Transportes_Correos_Almacenamiento['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Transportes_Correos_Almacenamiento.drop(columns = 'per_ocu', inplace = True) 
Transportes_Correos_Almacenamiento['poblacion_minima'] = pd.to_numeric(Transportes_Correos_Almacenamiento['poblacion_minima'], errors='coerce')
Transportes_Correos_Almacenamiento['poblacion_maxima'] = pd.to_numeric(Transportes_Correos_Almacenamiento['poblacion_maxima'], errors='coerce')
poblacion_total_Transportes_Correos_Almacenamiento = (Transportes_Correos_Almacenamiento.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Transportes_Correos_Almacenamiento = Transportes_Correos_Almacenamiento.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Transportes_Correos_Almacenamiento

empresas_Transportes_Correos_Almacenamiento = Transportes_Correos_Almacenamiento['nom_estab'].drop_duplicates() 
empresas_Transportes_Correos_Almacenamiento = len(empresas_Transportes_Correos_Almacenamiento)

print('Sector de Transportes, correos y almacenamiento')
print('Total de empresas es de', empresas_Transportes_Correos_Almacenamiento  )  #para imprimir cuantas empresas son
print('clave del sector va de', 48, '-', 49, 'con subsector de', 481,'-',488, 'hasta', 491, '-',493 )

###############################################################################
#9no Sector /  Información en medios masivos 

libreria = "denue_informacionenmediosmasivos_51.csv"
lectura_Datos = os.path.join(direccion, libreria)
Información_en_medios_masivos = pd.read_csv(lectura_Datos, encoding='latin1')
Información_en_medios_masivos.head(30)
Información_en_medios_masivos.dtypes #ver tipo de datos de cada variable del data frame
Información_en_medios_masivos.isnull().values.any() #ver si hay alguna columna con un valor nulo
Información_en_medios_masivos.columns #muestra las columnas 
Información_en_medios_masivos.duplicated().sum()

Información_en_medios_masivos = Información_en_medios_masivos[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Información_en_medios_masivos[['poblacion_minima', 'poblacion_maxima']] = Información_en_medios_masivos['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Información_en_medios_masivos.drop(columns = 'per_ocu', inplace = True) 
Información_en_medios_masivos['poblacion_minima'] = pd.to_numeric(Información_en_medios_masivos['poblacion_minima'], errors='coerce')
Información_en_medios_masivos['poblacion_maxima'] = pd.to_numeric(Información_en_medios_masivos['poblacion_maxima'], errors='coerce')
poblacion_total_Información_en_medios_masivos = (Información_en_medios_masivos.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Información_en_medios_masivos = Información_en_medios_masivos.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Información_en_medios_masivos

empresas_Información_en_medios_masivos = Información_en_medios_masivos['nom_estab'].drop_duplicates() 
empresas_Información_en_medios_masivos = len(empresas_Información_en_medios_masivos)

print('Sector de Información en medios masivos')
print('Total de empresas es de', empresas_Información_en_medios_masivos  )  #para imprimir cuantas empresas son
print('clave del sector va de', 51, 'con subsector de', 512, 'hasta',519 )

###############################################################################
#10mo Sector /  Servicios financieros y de seguros 

libreria = "denue_serviciosfinancieros_52.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_financieros = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_financieros.head(30)
Servicios_financieros.dtypes #ver tipo de datos de cada variable del data frame
Servicios_financieros.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_financieros.columns #muestra las columnas 
Servicios_financieros.duplicated().sum()

Servicios_financieros = Servicios_financieros[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_financieros[['poblacion_minima', 'poblacion_maxima']] = Servicios_financieros['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_financieros.drop(columns = 'per_ocu', inplace = True) 
Servicios_financieros['poblacion_minima'] = pd.to_numeric(Servicios_financieros['poblacion_minima'], errors='coerce')
Servicios_financieros['poblacion_maxima'] = pd.to_numeric(Servicios_financieros['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_financieros = (Servicios_financieros.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_financieros = Servicios_financieros.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_financieros

empresas_Servicios_financieros = Servicios_financieros['nom_estab'].drop_duplicates() 
empresas_Servicios_financieros = len(empresas_Servicios_financieros)

print('Servicios_financieros')
print('Total de empresas es de', empresas_Servicios_financieros  )  #para imprimir cuantas empresas son
print('clave del sector va de', 52, 'con subsector de', 521, 'hasta',525 )

###############################################################################
#11vo Sector /   Servicios inmobiliarios y de alquiler de bienes muebles e intangibles

libreria = "denue_serviciosinmobiliarios_53.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_inmobiliarios = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_inmobiliarios.head(30)
Servicios_inmobiliarios.dtypes #ver tipo de datos de cada variable del data frame
Servicios_inmobiliarios.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_inmobiliarios.columns #muestra las columnas 
Servicios_inmobiliarios.duplicated().sum()

Servicios_inmobiliarios = Servicios_inmobiliarios[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_inmobiliarios[['poblacion_minima', 'poblacion_maxima']] = Servicios_inmobiliarios['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_inmobiliarios.drop(columns = 'per_ocu', inplace = True) 
Servicios_inmobiliarios['poblacion_minima'] = pd.to_numeric(Servicios_inmobiliarios['poblacion_minima'], errors='coerce')
Servicios_inmobiliarios['poblacion_maxima'] = pd.to_numeric(Servicios_inmobiliarios['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_inmobiliarios = (Servicios_inmobiliarios.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_inmobiliarios = Servicios_inmobiliarios.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_inmobiliarios

empresas_Servicios_inmobiliarios = Servicios_inmobiliarios['nom_estab'].drop_duplicates() 
empresas_Servicios_inmobiliarios = len(empresas_Servicios_inmobiliarios)

print('Servicios_financieros')
print('Total de empresas es de', empresas_Servicios_inmobiliarios  )  #para imprimir cuantas empresas son
print('clave del sector va de', 53, 'con subsector de', 531, 'hasta',533 )

###############################################################################
#12vo Sector /    Servicios profesionales, científicos y técnicos

libreria = "denue_serviciosprofesionales_54.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_profesionales_tecnicos = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_profesionales_tecnicos.head(30)
Servicios_profesionales_tecnicos.dtypes #ver tipo de datos de cada variable del data frame
Servicios_profesionales_tecnicos.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_profesionales_tecnicos.columns #muestra las columnas 
Servicios_profesionales_tecnicos.duplicated().sum()

Servicios_profesionales_tecnicos = Servicios_profesionales_tecnicos[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_profesionales_tecnicos[['poblacion_minima', 'poblacion_maxima']] = Servicios_profesionales_tecnicos['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_profesionales_tecnicos.drop(columns = 'per_ocu', inplace = True) 
Servicios_profesionales_tecnicos['poblacion_minima'] = pd.to_numeric(Servicios_profesionales_tecnicos['poblacion_minima'], errors='coerce')
Servicios_profesionales_tecnicos['poblacion_maxima'] = pd.to_numeric(Servicios_profesionales_tecnicos['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_profesionales_tecnicos = (Servicios_profesionales_tecnicos.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_profesionales_tecnicos = Servicios_profesionales_tecnicos.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_profesionales_tecnicos

empresas_Servicios_profesionales_tecnicos = Servicios_profesionales_tecnicos['nom_estab'].drop_duplicates() 
empresas_Servicios_profesionales_tecnicos = len(empresas_Servicios_profesionales_tecnicos)

print('Servicios profesionales, científicos y técnicos')
print('Total de empresas es de', empresas_Servicios_profesionales_tecnicos  )  #para imprimir cuantas empresas son
print('clave del sector va de', 54, 'con subsector de', 541 )

###############################################################################
#13vo Sector /    Dirección y administración de grupos empresariales o corporativos

libreria = "denue_corporativos_55.csv"
lectura_Datos = os.path.join(direccion, libreria)
Administracion_grupos_empresariales = pd.read_csv(lectura_Datos, encoding='latin1')
Administracion_grupos_empresariales.head(30)
Administracion_grupos_empresariales.dtypes #ver tipo de datos de cada variable del data frame
Administracion_grupos_empresariales.isnull().values.any() #ver si hay alguna columna con un valor nulo
Administracion_grupos_empresariales.columns #muestra las columnas 
Administracion_grupos_empresariales.duplicated().sum()

Administracion_grupos_empresariales = Administracion_grupos_empresariales[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Administracion_grupos_empresariales[['poblacion_minima', 'poblacion_maxima']] = Administracion_grupos_empresariales['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Administracion_grupos_empresariales.drop(columns = 'per_ocu', inplace = True) 
Administracion_grupos_empresariales['poblacion_minima'] = pd.to_numeric(Administracion_grupos_empresariales['poblacion_minima'], errors='coerce')
Administracion_grupos_empresariales['poblacion_maxima'] = pd.to_numeric(Administracion_grupos_empresariales['poblacion_maxima'], errors='coerce')
poblacion_total_Administracion_grupos_empresariales = (Administracion_grupos_empresariales.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Administracion_grupos_empresariales = Administracion_grupos_empresariales.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Administracion_grupos_empresariales

empresas_Administracion_grupos_empresariales = Administracion_grupos_empresariales['nom_estab'].drop_duplicates() 
empresas_Administracion_grupos_empresariales = len(empresas_Administracion_grupos_empresariales)

print('Dirección y administración de grupos empresariales o corporativos')
print('Total de empresas es de', empresas_Administracion_grupos_empresariales  )  #para imprimir cuantas empresas son
print('clave del sector va de', 55, 'con subsector de', 551 )

###############################################################################
#14vo Sector / Servicios de apoyo a los negocios y manejo de residuos, y servicios de remediación

libreria = "denue_serviciosapoyonegocios_56.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicio_apoyo_negocios = pd.read_csv(lectura_Datos, encoding='latin1')
Servicio_apoyo_negocios.head(30)
Servicio_apoyo_negocios.dtypes #ver tipo de datos de cada variable del data frame
Servicio_apoyo_negocios.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicio_apoyo_negocios.columns #muestra las columnas 
Servicio_apoyo_negocios.duplicated().sum()

Servicio_apoyo_negocios = Servicio_apoyo_negocios[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicio_apoyo_negocios[['poblacion_minima', 'poblacion_maxima']] = Servicio_apoyo_negocios['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicio_apoyo_negocios.drop(columns = 'per_ocu', inplace = True) 
Servicio_apoyo_negocios['poblacion_minima'] = pd.to_numeric(Servicio_apoyo_negocios['poblacion_minima'], errors='coerce')
Servicio_apoyo_negocios['poblacion_maxima'] = pd.to_numeric(Servicio_apoyo_negocios['poblacion_maxima'], errors='coerce')
poblacion_total_Servicio_apoyo_negocios = (Servicio_apoyo_negocios.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicio_apoyo_negocios = Servicio_apoyo_negocios.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicio_apoyo_negocios

empresas_Servicio_apoyo_negocios = Servicio_apoyo_negocios['nom_estab'].drop_duplicates() 
empresas_Servicio_apoyo_negocios = len(empresas_Servicio_apoyo_negocios)

print('Servicios de apoyo a los negocios y manejo de residuos, y servicios de remediación')
print('Total de empresas es de', empresas_Servicio_apoyo_negocios  )  #para imprimir cuantas empresas son
print('clave del sector va de', 56, 'con subsector de', 551, 'hasta', 552 )

###############################################################################
#15vo Sector / Servicios educativos

libreria = "denue_servicioseducativos_61.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_educativos = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_educativos.head(30)
Servicios_educativos.dtypes #ver tipo de datos de cada variable del data frame
Servicios_educativos.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_educativos.columns #muestra las columnas 
Servicios_educativos.duplicated().sum()

Servicios_educativos = Servicios_educativos[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_educativos[['poblacion_minima', 'poblacion_maxima']] = Servicios_educativos['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_educativos.drop(columns = 'per_ocu', inplace = True) 
Servicios_educativos['poblacion_minima'] = pd.to_numeric(Servicios_educativos['poblacion_minima'], errors='coerce')
Servicios_educativos['poblacion_maxima'] = pd.to_numeric(Servicios_educativos['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_educativos = (Servicios_educativos.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_educativos = Servicios_educativos.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_educativos

empresas_Servicios_educativos = Servicios_educativos['nom_estab'].drop_duplicates() 
empresas_Servicios_educativos = len(empresas_Servicios_educativos)

print('Servicios educativos')
print('Total de empresas es de', empresas_Servicios_educativos  )  #para imprimir cuantas empresas son
print('clave del sector va de', 61, 'con subsector de', 611 )

###############################################################################
#16vo Sector / Servicios de salud y de asistencia social

libreria = "denue_serviciosalud_62.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_salud_asistencia = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_salud_asistencia.head(30)
Servicios_salud_asistencia.dtypes #ver tipo de datos de cada variable del data frame
Servicios_salud_asistencia.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_salud_asistencia.columns #muestra las columnas 
Servicios_salud_asistencia.duplicated().sum()

Servicios_salud_asistencia = Servicios_salud_asistencia[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_salud_asistencia[['poblacion_minima', 'poblacion_maxima']] = Servicios_salud_asistencia['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_salud_asistencia.drop(columns = 'per_ocu', inplace = True) 
Servicios_salud_asistencia['poblacion_minima'] = pd.to_numeric(Servicios_salud_asistencia['poblacion_minima'], errors='coerce')
Servicios_salud_asistencia['poblacion_maxima'] = pd.to_numeric(Servicios_salud_asistencia['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_salud_asistencia = (Servicios_salud_asistencia.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_salud_asistencia = Servicios_salud_asistencia.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_salud_asistencia

empresas_Servicios_salud_asistencia = Servicios_salud_asistencia['nom_estab'].drop_duplicates() 
empresas_Servicios_salud_asistencia = len(empresas_Servicios_salud_asistencia)

print('Servicios educativos')
print('Total de empresas es de', empresas_Servicios_salud_asistencia  )  #para imprimir cuantas empresas son
print('clave del sector va de', 62, 'con subsector de', 621, 'hasta',  624 )

###############################################################################
#17vo Sector / Servicios de esparcimiento culturales y deportivos, y otros servicios recreativos

libreria = "denue_serviciosesparcimiento_71.csv"
lectura_Datos = os.path.join(direccion, libreria)
Servicios_esparcimiento_cultural = pd.read_csv(lectura_Datos, encoding='latin1')
Servicios_esparcimiento_cultural.head(30)
Servicios_esparcimiento_cultural.dtypes #ver tipo de datos de cada variable del data frame
Servicios_esparcimiento_cultural.isnull().values.any() #ver si hay alguna columna con un valor nulo
Servicios_esparcimiento_cultural.columns #muestra las columnas 
Servicios_esparcimiento_cultural.duplicated().sum()

Servicios_esparcimiento_cultural = Servicios_esparcimiento_cultural[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_esparcimiento_cultural[['poblacion_minima', 'poblacion_maxima']] = Servicios_esparcimiento_cultural['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_esparcimiento_cultural.drop(columns = 'per_ocu', inplace = True) 
Servicios_esparcimiento_cultural['poblacion_minima'] = pd.to_numeric(Servicios_esparcimiento_cultural['poblacion_minima'], errors='coerce')
Servicios_esparcimiento_cultural['poblacion_maxima'] = pd.to_numeric(Servicios_esparcimiento_cultural['poblacion_maxima'], errors='coerce')
poblacion_total_esparcimiento_cultural = (Servicios_esparcimiento_cultural.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_esparcimiento_cultural = Servicios_esparcimiento_cultural.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_esparcimiento_cultural

empresas_Servicios_esparcimiento_cultural = Servicios_esparcimiento_cultural['nom_estab'].drop_duplicates() 
empresas_Servicios_esparcimiento_cultural = len(empresas_Servicios_esparcimiento_cultural)

print('Servicios de esparcimiento culturales y deportivos, y otros servicios recreativos')
print('Total de empresas es de', empresas_Servicios_esparcimiento_cultural  )  #para imprimir cuantas empresas son
print('clave del sector va de', 71, 'con subsector de', 711, 'hasta', 713)


###############################################################################
#18vo Sector Servicios de alojamiento temporal y de preparación de alimentos y bebidas

direccion = "J:\\Diego-files\\DENUE-datos\\"
librerias_alojamiento = ["denue_serviciosalojamiento1_72_1.csv",
                         "denue_serviciosalojamiento2_72_2.csv" ]
Servicios_Alojamiento_lista = []

for archivo in librerias_alojamiento:
    lectura_Datos = os.path.join(direccion, archivo) 
    Servicios_Alojamiento1 = pd.read_csv(lectura_Datos, encoding='latin1')
    Servicios_Alojamiento_lista.append(Servicios_Alojamiento1) #funcion para agregar a la lista vacia los datos
 
#se combinan los data frames en uno
Servicios_Alojamiento = pd.concat(Servicios_Alojamiento_lista, ignore_index=True)

Servicios_Alojamiento.head(45)                         
Servicios_Alojamiento.dtypes                              
Servicios_Alojamiento.isnull().any().any()
Servicios_Alojamiento.columns.tolist()    
Servicios_Alojamiento.duplicated().sum()

Servicios_Alojamiento = Servicios_Alojamiento[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_Alojamiento[['poblacion_minima', 'poblacion_maxima']] = Servicios_Alojamiento['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_Alojamiento.drop(columns = 'per_ocu', inplace = True) 
Servicios_Alojamiento['poblacion_minima'] = pd.to_numeric(Servicios_Alojamiento['poblacion_minima'], errors='coerce')
Servicios_Alojamiento['poblacion_maxima'] = pd.to_numeric(Servicios_Alojamiento['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_Alojamiento = (Servicios_Alojamiento.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_Alojamiento = Servicios_Alojamiento.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_Alojamiento

empresas_Servicios_Alojamiento = Servicios_Alojamiento['nom_estab'].drop_duplicates() 
empresas_Servicios_Alojamiento = len(empresas_Servicios_Alojamiento)

print('Sector Servicios de alojamiento temporal y de preparación de alimentos y bebidas')
print('Total de empresas es de', empresas_Servicios_Alojamiento  )  #para imprimir cuantas empresas son
print('clave del sector va de', 72,'con subsector de', 721, 'hasta', 722)

###############################################################################
#19no Otros servicios excepto actividades gubernamentales

direccion = "J:\\Diego-files\\DENUE-datos\\"
librerias_alojamiento = ["denue_otroservicios1_81_1.csv",
                         "denue_otroservicios2_81_2.csv" ]
Otros_Servicios_lista = []

for archivo in librerias_alojamiento:
    lectura_Datos = os.path.join(direccion, archivo) 
    Otros_Servicios1 = pd.read_csv(lectura_Datos, encoding='latin1')
    Otros_Servicios_lista.append(Otros_Servicios1) #funcion para agregar a la lista vacia los datos
 
#se combinan los data frames en uno
Otros_Servicios = pd.concat(Otros_Servicios_lista, ignore_index=True)

Otros_Servicios.head(45)                         
Otros_Servicios.dtypes                              
Otros_Servicios.isnull().any().any()
Otros_Servicios.columns.tolist()    
Otros_Servicios.duplicated().sum()

Otros_Servicios = Servicios_Alojamiento[['clee','nom_estab', 'raz_social','per_ocu','codigo_act','nombre_act','entidad','municipio','id']].fillna(0)
Servicios_Alojamiento[['poblacion_minima', 'poblacion_maxima']] = Servicios_Alojamiento['per_ocu'].astype(str).str.extract(r'(\d+\.?\d*)\D*(\d+\.?\d*)')
Servicios_Alojamiento.drop(columns = 'per_ocu', inplace = True) 
Servicios_Alojamiento['poblacion_minima'] = pd.to_numeric(Servicios_Alojamiento['poblacion_minima'], errors='coerce')
Servicios_Alojamiento['poblacion_maxima'] = pd.to_numeric(Servicios_Alojamiento['poblacion_maxima'], errors='coerce')
poblacion_total_Servicios_Alojamiento = (Servicios_Alojamiento.groupby('nom_estab', as_index=False)[['poblacion_minima', 'poblacion_maxima']].sum())
poblacion_total_Servicios_Alojamiento = Servicios_Alojamiento.groupby('nom_estab')[['poblacion_minima', 'poblacion_maxima']].sum().reset_index()
poblacion_total_Servicios_Alojamiento

empresas_Servicios_Alojamiento = Servicios_Alojamiento['nom_estab'].drop_duplicates() 
empresas_Servicios_Alojamiento = len(empresas_Servicios_Alojamiento)

print('Sector Servicios de alojamiento temporal y de preparación de alimentos y bebidas')
print('Total de empresas es de', empresas_Servicios_Alojamiento  )  #para imprimir cuantas empresas son
print('clave del sector va de', 72,'con subsector de', 721, 'hasta', 722)



###############################################################################





#data frame que contenga sector, total empresas, codigo sector y subsector , ponderacion del total



