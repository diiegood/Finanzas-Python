#EDHEC Course basis

purchase_price = 10 
sales_price = 12
profit = sales_price - purchase_price
pct_return = profit/sales_price
pct_return
profit


print("profit from the trade was", profit)
print("and the return was", pct_return)
print(pct_return * 100, "percent")


###############################################################################

"Lab session prices to returns"
#calcular los retornos de los precios

import numpy as np
import pandas as pd
import matplotlib as plt

#calculo del retorno del precio 

"calculo "
#el retornor del precio es igual a el el precio de hoy restando el precio de ayer dividido sobre el precio de ayer
#o tambien se puede calcular como el precio de hoy sobre el precio de ayer menos uno.

precio_ayer = 21.02
precio_hoy = 20.94
retorno = ( precio_hoy - precio_ayer  ) / precio_ayer
retorno_opcional = ( precio_hoy / precio_ayer ) - 1


prices_a = np.array( [8.72, 8.91, 8.51, 8.66]) #se convierte en vector
prices_a

#indicadores de poisicion del vector (python cuenta desde cero)
prices_a[:1] #muestra solo el numero antes de la posicion 1 del vector (valor)
prices_a[1:] #muestra los numeros empezando por la posicion 1 del vector (lista)
prices_a[1]  #muestra el numero de la poscion 1 del vector  (valor)

prices_a[1:]/prices_a[:1]-1 #tranformacion de los precios en retornos
#precios de la posicion 1 divididos entre los precios de la posicion 1 restando 1 #se aplica la formula
#de retorno opcional.


prices = pd.DataFrame({
    "BLUE": [8.70, 8.91, 8.71, 8.43, 8.73],
    "ORANGE": [10.66, 11.08, 10.71, 11.59, 12.11]
})

print(prices)

prices.iloc[1:] #se le quita el primer valor del dataframe anteriormente creado

prices.iloc[-1:] #deja solo el ultimo valor del dataframe
prices.iloc[:-1] #quita el ultimo valor del data frame

prices.iloc[1:]/prices.iloc[:-1] - 1 #divide el ultimo valor sobre los ultimos valores y le resta 1


prices.iloc[1:].values/prices.iloc[:-1] - 1 #muestra una transformacion logaritmica de los datos

prices.iloc[1:]/prices.iloc[:-1].values - 1 #aunque se cambie la operacion sigue saliendo exactamente lo mismo

prices.shift(1) #quita el ultimo precio y lo pone al principio agregando un NaN

#para calcular los retornos esperados de las acciones
returns = prices / prices.shift(1)-1
returns

returns = prices.pct_change() #queda exactamente el mismo valor que se tenia anteriormente
returns

#para leer un csv

prices_stock = pd.read_csv("C:\\Users\\creep\\.spyder-py3\\stocks\\NAFTRAC.csv")
prices_stock = prices_stock[["Price", "Open"]]
returns = prices.pct_change(); returns #se calcula el rendimiento logaritmico de las acciones

returns.mean()
returns.std()
returns.plot.bar()
returns.plot()

#counpounding returs, se agrega un +1 
returns +1

#expresiones iguales

np.prod(returns +1)
(returns+1).prod()

(returns+1).prod()-1 #se le quita el +1 que se habia puesto posteriormente
(((returns + 1).prod()-1)*100).round(2)

#para anualizar los retornos ##################################################

rm = 0.01
(1+rm)**12 - 1

rq = 0.04
(1+rq)**4 - 1


###############################################################################
###############################################################################
###############################################################################

"Calculo de volatilidad y riesgo"

#la volatilidad es la desviacion estandar y la varianza del activo 

#volatilidad / desviacion estandar o varianza
#rendimiento / media aritmetica

media = 0.0005
volatilidad = 0.015
dias_de_mercado = 252

#es el retorno del activo es la media aritmetica
media_anualizada = media * dias_de_mercado
media_anualizada = media_anualizada * 100

#es la volatilidad del activo la desviacion estandar
volatilidad_anualizada = volatilidad * np.sqrt(dias_de_mercado)
volatilidad_anualizada = volatilidad_anualizada * 100

#ratio de retorno por riesgo . #mide que tan seguro o rentable es invertir en dicho activo
#es el exceso de retorno del activo que se pudo haber obtenido sin volatilidad / libre de riesgo
ratio_retorno_riesgo =media_anualizada / volatilidad_anualizada
ratio_retorno_riesgo

"Sharpe ratio"  
#es el rendimiento del activo - rendimiento libre de riesgo ambos divido sobre la volatilidad del activo

retorno = 0.15 #rendimiento anualizado del activo
tasa_libre_riesgo = 0.08 #rendimiento anualizado de los cetes 
desviacion_estandar = 0.16 #volatilidad del activo

sharpe_ratio = (retorno - tasa_libre_riesgo ) / desviacion_estandar
sharpe_ratio

"Tuplas y Listas"

#####################################   Tuplas

"""
Las tuplas no se pueden modificar (son inmutables)
tienen un parentesis como simbolo
tienen pocos metodos para modificar :
    count(contar los elementos que hay correspondiente al nombre o numero del valor que se pregunta), 
    index (para enconrar la posicion del indice de un valor)
son mas rapidas
son para datos fijos o valores que son constantes
tienen mas seguridad en tener los datos al ser inmutables
"""

#Las tuplas son convenientes para poder tener datos que no se quieren modificar o seran constantes
#son para tener mas seguridad o procesos mas rapido de calculo
#se usan como claves en diccionarios porque no se modifican

"Ejemplos"

#tuplas
(1,0) #tupla normal
 
((1,0)) #misma tupla que la de arriba

((1,0),) #una tupla dentro de otra tupla

((1,0),)* 5 #multiplicacion de una tupla por 5 , da 5 tuplas de resultado

gatos = ("gato", "gato1", "gato2", "gato3")
gatos.count("gato")  #arroja como resultado 1 osea, que hay un valor que corresponde a esta descripcion en la tupla
gatos.index("gato1") #rebela la posicion en la que esta el valor "gato1"


#####################################   Listas

"""
Las listas  se pueden modificar (son mutables)
tienen corechetes como simbolo
tienen algunos metodos para modificar :
    append.(agregar un valor nuevo dentro de la lista), 
    remove (para remover un valor dentro de la lista)
son mas lentas
son para datos que pueden ir cambiando
"""

#Ejemplos:

mi_lista = [1, 2, 3]
mi_lista.append(4)  #se puede agregar un valor
mi_lista.remove(4)  #se elimina el valor 4 que se acaba de agregar a la lista

5 * mi_lista #multiplica 5 veces la lista recien creada
