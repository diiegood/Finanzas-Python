"En el modulo donde se van a llamar las funciones", modulo principal

"Importar un modulo de otra libreria"

import pandas as pd
import modulos as md  #se importa el modulo a usar donde estan las funciones

#Se cargarn las finciones de otros modulos que se van a usar
"Se carga la funcion de retornos"
returns = md.obtener_retornos() #se renombra la importacion del modulo y la funcion en un nuevo valor
returns.head() #se llama el valore creado 

"Se carga la funcion de crear el calculo"

md.drawdown(returns["2010":]["Small Cap"])["Drawdown"].min()

###########################################################################
###########################################################################
###########################################################################

"En el modulo secundario donde se van a crear las funciones"

#nombre del modulo ---- es "modulos" #######################################

"Funciones que se van a crear o seran utilizadas en el modulo principal"
import pandas as pd 

def drawdown(return_series: pd.Series): #se le dice a python que se espera una serie aqui
    """
    Takes a time series of asset returns
    Computes and returns a DataFrame that contains:
    indice de cartera 
    the previos peaks
    percent drawdowns
    """
    indice_cartera = 1000*(1+return_series).cumprod()
    previous_peaks = indice_cartera.cummax()
    drawdown = (indice_cartera - previous_peaks) / previous_peaks
    return pd.DataFrame({
        "Cartera": indice_cartera,
        "Max hist": previous_peaks,
        "Drawdown": drawdown})


def obtener_retornos():
    """
    Cargar la base de datos de los retornos de la capitalizacion de mercado de los deciles
    """
    datos = pd.read_csv("C:/Users/creep/OneDrive/Escritorio/programacion/data/Portfolios_Formed_on_ME_monthly_EW.csv",
                        header = 0, index_col = 0, na_values= -99.99)
    activos = datos[["Lo 10", "Hi 10"]]
    activos.columns = [["Small Cap", "Large Cap"]]
    activos = activos / 100
    activos.index = pd.to_datetime(activos.index, format="%Y%m").to_period("M")
    return activos
    
