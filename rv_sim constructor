# archivo de _rv_sim.py

#codigo principal que usa el complementario de  ###random_variables###
####archivo de soporte####  / script de llamamiento
#primero se corre el otro script al que va llamar, despues al principal#

#librerias#
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import scipy.stats as st
import importlib
import sys

#se importan nuestros propios archivos y se vuelven a cargar#
import random_variables
from subdirectorio import random_variables
sys.path.append('C:/Users/creep/OneDrive/Escritorio/random_variables')

# Crear una instancia de simulation_inputs_inputs
inputs = random_variables.simulation_inputs_inputs()

# importar la libreria de la direccion correspondiente del archivo nombrado random_variables #
# <module 'random_variable' from ('C/Users/creep/Escritorio/random_variables.py')

#la variable que se desee generar puede ser#
### normal, student, uniform exponential, chi-squared###


#inputs
inputs = random_variables.simulation_inputs()
inputs.df = 2  #degrees of freedmon or df in student and chi-squared
inputs.scale = 17  #scale in exponencial 
inputs.mean = 5  #mean in normal
inputs.std = 10   #standart deviation or std in normal
inputs.size = 10**6  
inputs.rv_type = "student" #aqui va la funcion que se desea generar#
inputs.decimals = 5 

# Ejemplo de uso / computations / 
sim = random_variables.simulator(inputs) #con esta linea se llama el archivo creado con este nombre#
sim.generate_vector()
sim.compute_stats()
sim.plot()

sim = random_variables.simulator(inputs)

# Generar el vector
sim.generate_vector(inputs)

# Calcular estadÃ­sticas
sim.compute_stats()

# Graficar
sim.plot()


###############################################################################
#Codigo funcional #

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as st
import importlib


class simulation_inputs:
    
    def __init__(self):
        self.df = None
        self.scale = None
        self.mean = None
        self.std = None
        self.rv_type = None
        self.size = None
        self.decimals = None

class simulator:
    
    # constructor
    def __init__(self, inputs):
        self.inputs = inputs
        self.str_title = None
        self.vector = None
        self.mean = None
        self.volatility = None
        self.skewness = None
        self.kurtosis = None
        self.jb_stat = None
        self.p_value = None
        self.is_normal = None
        
    def generate_vector(self):
        self.str_title = self.inputs.rv_type
        if self.inputs.rv_type == 'standard_normal':
            self.vector = np.random.standard_normal(self.inputs.size)
        elif self.inputs.rv_type == 'normal':
            self.vector = np.random.normal(self.inputs.mean, self.inputs.std, self.inputs.size)
        elif self.inputs.rv_type == 'student':
            self.vector = np.random.standard_t(df=self.inputs.df, size=self.inputs.size)
            self.str_title = self.str_title + ' df=' + str(self.inputs.df)
        elif self.inputs.rv_type == 'uniform':
            self.vector = np.random.uniform(size=self.inputs.size)
        elif self.inputs.rv_type == 'exponential':
            self.vector = np.random.exponential(scale=self.inputs.scale, size=self.inputs.size)
            self.str_title += ' scale=' + str(self.inputs.scale)
        elif self.inputs.rv_type == 'chi-squared':
            self.vector = np.random.chisquare(df=self.inputs.df, size=self.inputs.size)
            self.str_title += ' df=' + str(self.inputs.df)
            
    def compute_stats(self):
        self.mean = st.tmean(self.vector)
        self.volatility = st.tstd(self.vector)
        self.skewness = st.skew(self.vector)
        self.kurtosis = st.kurtosis(self.vector)
        self.jb_stat = self.inputs.size/6 * (self.skewness**2 + 1/4*self.kurtosis**2)
        self.p_value = 1 - st.chi2.cdf(self.jb_stat, df=2)
        self.is_normal = (self.p_value > 0.05) # equivalently jb < 6
        
    def plot(self):
        self.str_title += '\n' + 'mean=' + str(np.round(self.mean,self.inputs.decimals)) \
            + ' | ' + 'volatility=' + str(np.round(self.volatility,self.inputs.decimals)) \
            + '\n' + 'skewness=' + str(np.round(self.skewness,self.inputs.decimals)) \
            + ' | ' + 'kurtosis=' + str(np.round(self.kurtosis,self.inputs.decimals)) \
            + '\n' + 'JB stat=' + str(np.round(self.jb_stat,self.inputs.decimals)) \
            + ' | ' + 'p-value=' + str(np.round(self.p_value,self.inputs.decimals)) \
            + '\n' + 'is_normal=' + str(self.is_normal)
        plt.figure()
        plt.hist(self.vector,bins=100)
        plt.title(self.str_title)
        plt.show()
        
        
# inputs
inputs = simulation_inputs()
inputs.df = 23 # degrees of freedom or df in student and chi-squared
inputs.scale = 17 # scale in exponential
inputs.mean = 5 # mean in normal
inputs.std = 10 # standard deviation or std in normal
inputs.size = 10**6
inputs.rv_type = 'student'
# options: standard_normal normal student uniform exponential chi-squared
inputs.decimals = 5

# computations
sim = simulator(inputs)
sim.generate_vector()
sim.compute_stats()
sim.plot() 
