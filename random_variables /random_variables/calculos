"Tarea Calculo de  Metricas para un activo" "10/10/24"

#librerias
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import scipy.stats as st
import importlib



#se crea una funcion que es una serie de tiempo  / requiere otra funcion que sincronice la serie de tiempo secundaria


def serie_tiempo(ric):
    directorio ='C:\\Users\\creep\\.spyder-py3\\stocks\\'   #ruta de consulta donde se alojan los datos
    path = directorio + ric + '.csv' #se genera una funcion dond esta la ruta, el nombre del archivo y su fomrato
    raw_data = pd.read_csv(path) #carga un data frame, tipo csv asignado en la funcion path
    t = pd.DataFrame()
    t['fecha']  = pd.to_datetime(raw_data['Date'], dayfirst = True ) 
    t['cierre'] = raw_data['Close']
    t = t.sort_values(by='fecha', ascending=True)
    t['close_previous'] = t['cierre'].shift(1)
    t ['return_close'] = t['cierre']/t['close_previous'] - 1
    t = t.dropna()
    t = t.reset_index(drop=True)
    return t


#se crea la clase de distribucion.
#clase contiene las siguientes funciones:
    
#modelo constructor con los automallmaientos de todas las variables a usar
#funcion de serie de tiempo
#funcion para graficar la serie de tiempo
#funcion que tenga todos los parametros a calcular
#funcion que grafique el histograma con todos los calculos que se debe hacer


class distribution: 
    
    def __init__(self,ric,decimals = 5):
        self.ric = ric
        self.decimals = decimals
        self.str_title = None
        self.vector = None
        self.mean_annual = None
        self.volatilidad_anual = None
        self.sharpe_ratio = None
        self.var_95 = None
        self.skewness = None
        self.kurtosis = None
        self.jb_stat = None
        self.p_value = None
        self.is_normal = None

#se crea la funcion para la serie de tiempo
    def serie_tiempo(self):
        self.serie_de_tiempo = serie_tiempo(self.ric)
        self.vector = self.serie_tiempo['return_close'].values
        self.size = len(self.vector)
        self.str_title = self.ric + "| datos reales"

#se crea otra funcion para la graficar la serie de tiempo
    def graficar_serietiempo(self):
        plt.figure()
        self.serie_tiempo.plot(kind= 'line', x='fecha', y = 'cierre', grid = True, color ='red',\
                               title = 'serie de tiempo de los precios de cierre de ' + self.ric)
        plt.show()
            
#se genera una funcion que contenga todos los calculos o parametros a utilziar
    def compute_stats(self, factor = 252):
        self.rendimiento_anual = st.tmean(self.vector) * factor
        self.volatilidad_anual = st.tstd(self.vector) * np.sqrt (factor)
        self.sharpe_ratio = self.mean_annual / self.volatilidad_anual if self.volatilidad_anual > 0 else 0.0
        self.var_95 = np.percentile(self.vector,5)
        self.asimetria = st.skew(self.vector) 
        self.curtosis = st.kurtosis(self.vector) 
        self.jarque_bera = self.size/6 * (self.skewness**2 + 1/4*self.kurtosis)
        self.p_value = 1 - st.chi2.cdf(self.jb_stat, df=2)
        self.is_normal = (self.p_value>0.05)

#se genera otra funcion que contiene el histograma de la funcion.
    def grafica_histograma(self):
        self.str_title += '\n' + 'rendimiento anual=' + str(np.round(self.mean_annual,self.decimals)) \
            + ' | ' + 'volatilidad anual=' + str(np.round(self.volatility_annual,self.decimals)) \
            + '\n' + 'sharpe_ratio=' + str(np.round(self.sharpe_ratio,self.decimals)) \
            + ' | ' + 'VaR_95=' + str(np.round(self.var_95,self.decimals)) \
            + '\n' + 'asimetria=' + str(np.round(self.skewness,self.decimals)) \
            + ' | ' + 'curtosis=' + str(np.round(self.kurtosis,self.decimals)) \
            + '\n' + 'Jarque Bera=' + str(np.round(self.jb_stat,self.decimals)) \
            + ' | ' + 'p-value=' + str(np.round(self.p_value,self.decimals)) \
            + '\n' + 'is_normal=' + str(self.is_normal)
        plt.figure()
        plt.hist(self.vector, bins=100)
        plt.title(self.str_title)
        plt.show()
        
###############################################################################
