# Data Frame convertir rendimientos en fechas para serie de tiempo
# CreaciÃ³n de data frame con valores para crear el vector de rendimiento
# Pandas puede calcular vectores de las tablas, operaciones con tablas como si fueran matrices 

################################  Librerias ##################################

import yfinance as yf
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import scipy.stats as st
import os

######################### Directorio + datos que jala #########################
# Inputs #activos que pueden usarse (AMZN, APPL, DAI-USD, BAC, BTC-USD, (FAS), BLK,CHFUSD=X, CHDRAUIB)
ric = 'EWW' # activo 

###############################################################################
#para cargar directamente de yahoo finance
#ticker_symbol = "AMZN"
#data = yf.download(ticker_symbol, start="2020-01-01", end="2025-2-20")
###############################################################################

# Definir el directorio donde se encuentran los archivos
directorio = 'C:\\Users\\creep\\.spyder-py3\\stocks\\'  
path = directorio + ric + ".csv" # Leer el archivo CSV
raw_data = pd.read_csv(path)  # Entrada para leer csv



#mu */- 1.64 * sigma para  90% confiaza
#mu +/- 1.96 * sigma para  95% confianza

###############################################################################
#creacion de la serie de tiempo 
#creacion del data frame y los vectores de precios para el rendimiento
t = pd.DataFrame()  # Crear un data frame vacio

# Proceso de datos para los calculos
#si voy a meter una accion americana o extrangera cambiar Fecha a / Date  y Cierre a / Close
"Si es accion mexicana usar"
#t["date"] = pd.to_datetime(raw_data["Fecha"], dayfirst=True )  # Convertir la columna "Date" a serie de tiempo
"Si es accion extranjera usar"
t["date"] = pd.to_datetime(raw_data["Date"], dayfirst=False ) #Convertir la columna "Date" a serie de tiempo
#t["close"] = raw_data["Cierre"]  # Asignar la columna "Close" , si es accion mexicana
t["close"] = raw_data["Close"]  # Asignar la columna "Close", si es accion extranjera
t = t.sort_values(by="date", ascending=True)  # Ordenar por fecha
t["close_previous"] = t["close"].shift(1)  # Crear columna del cierre anterior

# Calcular el rendimiento del activo
t["return_close"] = t["close"] / t["close_previous"] - 1
t = t.dropna()  # Eliminar filas con valores NaN
t = t.reset_index(drop=True)  # Reiniciar el i­ndice



######################## Funcion del objeto simulador #########################

class SimulationInputs:
    def __init__(self):
        self.df = None
        self.scale = None
        self.mean = None
        self.std = None
        self.rv_type = None
        self.Var_95 = None
        self.size = None
        self.decimals = None

class Simulator:
    # Constructor
    def __init__(self, inputs):
        self.inputs = inputs
        self.str_title = None
        self.vector = None
        self.mean = None
        self.volatility = None
        self.skewness = None
        self.kurtosis = None
        self.var_95 = None
        self.jb_stat = None
        self.p_value = None
        self.is_normal = None
        
    def generate_vector(self):
        self.str_title = self.inputs.rv_type
        if self.inputs.rv_type == 'standard_normal':
            self.vector = np.random.standard_normal(self.inputs.size)
        elif self.inputs.rv_type == 'normal':
            self.vector = np.random.normal(self.inputs.mean, self.inputs.std, self.inputs.size)
        elif self.inputs.rv_type == 'student':
            self.vector = np.random.standard_t(df=self.inputs.df, size=self.inputs.size)
            self.str_title += f' df={self.inputs.df}'
        elif self.inputs.rv_type == 'uniform':
            self.vector = np.random.uniform(size=self.inputs.size)
        elif self.inputs.rv_type == 'exponential':
            self.vector = np.random.exponential(scale=self.inputs.scale, size=self.inputs.size)
            self.str_title += f' scale={self.inputs.scale}'
        elif self.inputs.rv_type == 'chi-squared':
            self.vector = np.random.chisquare(df=self.inputs.df, size=self.inputs.size)
            self.str_title += f' df={self.inputs.df}'
            
    def compute_stats(self):
        self.mean = st.tmean(self.vector)
        self.volatility = st.tstd(self.vector)
        self.skewness = st.skew(self.vector)
        self.Var_95 = np.percentile(self.vector,5) #es el 5% de decimales esta al 95%
        self.kurtosis = st.kurtosis(self.vector)
        self.jb_stat = self.inputs.size / 6 * (self.skewness**2 + 1/4 * self.kurtosis**2)
        self.p_value = 1 - st.chi2.cdf(self.jb_stat, df=2)
        self.is_normal = (self.p_value > 0.05)  # Equivalente a jb < 6
        
    def plot(self):
        self.str_title += f'\nmean={np.round(self.mean, self.inputs.decimals)} | volatility={np.round(self.volatility, self.inputs.decimals)}' \
                          f'\nskewness={np.round(self.skewness, self.inputs.decimals)} | kurtosis={np.round(self.kurtosis, self.inputs.decimals)}' \
                          f'\nJB stat={np.round(self.jb_stat, self.inputs.decimals)} | p-value={np.round(self.p_value, self.inputs.decimals)}' \
                          f'\nis_normal={self.is_normal} | Var_95 = {np.round(self.Var_95, self.inputs.decimals)}'
        plt.figure()
        plt.hist(self.vector, bins=100)
        plt.title(self.str_title)
        plt.show()

################################ Inputs para simulacion #######################
inputs = SimulationInputs()
inputs.rv_type = ric + '| real time '
inputs.decimals = 5  # Decimales a mostrar

# Calculos y simulacion.
sim = Simulator(inputs)
sim.vector = t['return_close'].values # Generar vector
sim.inputs.size = len(sim.vector)
sim.str_title = sim.inputs.rv_type
sim.compute_stats()  # Calcular estadisticas
sim.plot()  # Graficar

#valores calculados / todos expresados en un porcentaje de 100%
rendimiento_diario = sim.mean #calculo de la media
rendimiento_diario = rendimiento_diario * 100
rendimiento_anual = sim.mean * 252 #se calcula de la media anualizada (se multiplica por los dias de mercado 252)
rendimiento_anual = rendimiento_anual * 100
volatilidad_diaria =sim.volatility #calculo de volatilidad
volatilidad_diaria = volatilidad_diaria * 100
volatilidad_anual = sim.volatility * np.sqrt(252)  #calculo de la volatilidad anualizada
volatilidad_anual = volatilidad_anual * 100
#volatilidad * raiz (T) o  tambien (volatilidad * 16 (raiz cuadrada de 256 = 16))
VaR_95 = sim.Var_95 #es el 5% de decimales esta al 95%
VaR_95 = VaR_95 * 100
"para el calculo sharpe" #el cociente debe ser 2 o mayor en una estrategia de inversion.
#se pide que sea mayor a 2 porque entonces, los rendimientos que se obtienen, van a ser positivos.
#ya que en 2 todo el intervalo de confianza va ser positivo 
#( sharpe =  mu / sigma )
#sharpe mayor a 2 es suponer que los rendimientos son normales 
#por lo tanto el intervalo de confianza es totalmente positivo

#Segun el despeje:

"mu / sigma >2 "
"mu > 2 * sigma "
"mu - 2 sigma > 0 "  #mu - 2 sigma es positivo

#Por lo tanto con el sharpe > 2 ,  el rendimiento que se ofrece es positivo en un 95% de los casos (intervalo de confianza)
#siendo diferente al calculado anteriormente, que es el de mean * 252 (media anaulizada) , siendo mas la media aproximada
#sharpe ratio, se usa como parametro para tener mayor precision sobre el rendimiento real, teniendo en cuenta los intervalos de confianza
#suponiendo que los rendimientos son normales o siguen un movimiento browniano



#se calcula media anualizada /  volatilidad anualizada
sharpe_ratio = sim.mean *252 / (sim.volatility*np.sqrt(252))
sharpe_ratio

#analisis de metricas
print("Se tiene un rendimiento diario de " , rendimiento_diario, "%")
print("Se tiene una volatilidad diaria de ", volatilidad_diaria,"%")
print("Tenemos un rendimiento esperado anual aproximado de ", rendimiento_anual ,"%" )
print("Dada la volatilidad anual del activo en", volatilidad_anual, "%")
print("Tenemos un sharpe ratio de ", sharpe_ratio, "%")
print("Tiene skewness positiva por que la gran mayoria de los dias son positivos")
print("Tiene media positiva porque las ganancias suelen ser positivas")
print("La curtosis en exceso es positiva, tiene colas muy largas tiene muchas anomalias en cuanto a los precios mas positivos ")
#este parametro sirve para ver que tan significativa es la media comparada con la volatilidad
print("EL valor en Riesgo con un 95% de confianza es de ", VaR_95, "%")
print("En el 95% de los casos los rendimientos van a se mayores que esto ",VaR_95, "%", "siendo este la peor perdida diaria") #si se desea tener el VaR de cada 3 meses o 5 meses se tiene que cambiar el percentil
#95% de los casos es 1 dia de 20 (1/20), 1 dia al mes / pudiendo tener la peor perdida diaria en el valor del VaR_95
#nos dice cual es la peor perdida diaria que se puede tener en 1 mes

sharpe = sharpe_ratio *100

print("Se interpreta por cada unidada de riesgo que se aumenta 1% de volatilidad extra o riesgo, se va ganar un", sharpe_ratio ,"% de rendimiento extra")


#se busca que sea mayor a 1 para poder tener un rendimiento arriba del punto de riesgo, justificando el riesgo

#Sharpe de mas de 2 / sea 5 o 10 es excelente entre mayor mejor.
#porque el intervalo de confianza es mas pequeño por lo que hay mayor certeza sobre la media a largo plazo

#Parametros importantes

#media como parametro de media aproxiamada
#sharpe ratio como parametro de media real , teniendo en cuenta el intervalo de confianza
#volatilidad

###############################################################################

#para construir la serie de tiempo , es para el comportamiento del activo de su precio a lo largo del tiempo, no del rendimiento
# / x =  tiempo (fecha) , y = precio (precio cierre) , grid = para que se vean rallitas en la grafica (True)

plt.figure()

#funcionalidad de dataframe .plot, para graficar diferentes tipos de graficas:
    #kind = "line", "bar", "hist", "area", "pie", "scatter", "hexbin", "box", "density", "kde"
t.plot(kind='line', x='date', y='close', grid=True, color='orange',
       label=ric, title='Serie de tiempo de precio cierre ' + ric)

plt.show()











#comparar SPY con el ^SPY / indice vs tracker , para que que tanto lo replica realmente.
#si se mueve el SPY se espera que se mueva el tracker ETF ( ^SPY)

###############################################################################

#para meterme a la variable directorio / nos muestra los datos de todos activos en el directorio.

#se van a crear 2 listas / para ver todos los activos si tienden a la normal

rics = []
is_normals = []

for file_name in os.listdir(directorio):
    print('file_name = ' + file_name)
    ric = file_name.split('.') [0] #me construye una lista que me va dar el ric
    if ric == 'ReadMe': #se le agrega un condicional por si hay un archivo con un diferente formato
        continue
    path = directorio + ric + ".csv" 
    #se obtiene el data frame
    t = pd.DataFrame()  # Crear un data frame vacio
    # Proceso de datos para los calculos
    #si voy a meter una accion americana o extrangera cambiar Fecha a / Date  y Cierre a / Close
    t["date"] = pd.to_datetime(raw_data["Date"], dayfirst=False )  # Convertir la columna "Date" a serie de tiempo
    t["close"] = raw_data["Close"]  # Asignar la columna "Close"
    t = t.sort_values(by="date", ascending=True)  # Ordenar por fecha
    t["close_previous"] = t["close"].shift(1)  # Crear columna del cierre anterior
    # Calcular el rendimiento del activo
    t["return_close"] = t["close"] / t["close_previous"] - 1
    t = t.dropna()  # Eliminar filas con valores NaN
    t = t.reset_index(drop=True)  # Reiniciar el i­ndice
    
    # Calculos y simulacion.
    sim = Simulator(inputs)
    sim.vector = t['return_close'].values # Generar vector
    sim.inputs.size = len(sim.vector)
    sim.str_title = sim.inputs.rv_type
    sim.compute_stats()  # Calcular estadisticas
    sim.plot()  # Graficar

    #valores calculados
    rendimiento_diario = sim.mean #calculo de la media
    rendimiento_diario = rendimiento_diario * 100
    rendimiento_anual = sim.mean * 252 #se calcula de la media anualizada (se multiplica por los dias de mercado 252)
    volatilidad_diaria =sim.volatility #calculo de volatilidad
    volatilidad_diaria = volatilidad_diaria * 100
    volatilidad_anual = sim.volatility * np.sqrt(252)  #calculo de la volatilidad anualizada
    #volatilidad * raiz (T) o  tambien (volatilidad * 16 (raiz cuadrada de 256 = 16))
    
    #generar listas  / se le agregan las listas vacias
    rics.append(ric)
    is_normals.append(sim.is_normal)
    
dataframe = pd.DataFrame() #se le agregan columnas al data frame vacio / rics , is normal
#hacer las listas por orden para que no se revuelvan, son listas ordenadas 
dataframe ['rics'] = rics
dataframe ['is_normal'] = is_normals
    
 


    

