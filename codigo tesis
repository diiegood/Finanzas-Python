"Codigo para Tesis"

"Encontrar la correlaciones sectoriales de cada sector con el del Indice Bursatil"

###############################################################################
"Sectores de los ETFs"   #Tracker del S&P500 "SPY"

#S&P500  Technology Sector - XLK
#S&P500  Financial Sector - XLF
#S&P500  Health Care Sector - XLV
#S&P500  Energy Sector - XLE
#S&P500  Communication - XLC
#S&P500  Consumer Discretionary Sector -  XLY
#S&P500  Consumer Staples Sector - XLP
#S&P500  Industrial Sector - XLI
#S&P500  Materials Sector - XLB
#S&P500  Real State Sector - XLRE
#S&P500  Utilities Sector - XLU

##############################################################################
"Empresas tecnologicas mas representativas"

#Apple - AAPL
#Microsoft - MSFT
#Nvidia - NVDA
#Amazon - AMZN
#Alphabet - GOOG

###############################################################################
"Sectores de los ETFs"   #Tracker del IPC-BMV 
#EWW  ISHARES MSCI Mexico ETF /  NYSE
#NAFTRAC.MX    ISHARES NAFTRAC  / NACIONAL FINANCIERA S.N.C. / Impulsora y Black Rock Mexico




###############################################################################

#librerias importantes  #scikitt / tensorflow (IA google) , pytortch (IA)
import numpy as np  #conocer bien la libreria
import pandas as pd #conocer bien la libereria
import matplotlib.pyplot as plt #conocer bien la libreria
import scipy.stats as st #conocer bien la libereria
import importlib


#Para el Capm se necesita 2 series de tiempo y una sincronizacion de las mismas
#tambien se usa para la matriz de covarianza y varianza.

###############################################################################
"Comparacion de activos" ## Definir los activos (ric) y el benchmark

#security = '^MXN' (benchmark)
security = "EWW2" #variable y #activo
benchmark = "NAFTRAC" #variable x #indice de referencia

###############################################################################

# Definir el directorio donde se encuentran los archivos CSV
directorio = 'C:\\Users\\creep\\.spyder-py3\\stocks\\'

# Iterar sobre cada activo (ric) y procesarlo

def series_tiempo(ric):
    directorio ='C:\\Users\\creep\\.spyder-py3\\stocks\\'   #ruta de consulta donde se alojan los datos
    path = directorio + ric + '.csv' #se genera una funcion dond esta la ruta, el nombre del archivo y su fomrato
    raw_data = pd.read_csv(path) #carga un data frame, tipo csv asignado en la funcion path
    t = pd.DataFrame()
    t['Fecha']  = pd.to_datetime(raw_data['Date'], dayfirst = False ) 
    t['cierre'] = raw_data['Close']
    t = t.sort_values(by='fecha', ascending=True)
    t['close_previous'] = t['cierre'].shift(1)
    t ['rendimiento'] = t['cierre']/t['close_previous'] - 1
    t = t.dropna()
    t = t.reset_index(drop=True)
    return t

# Llamar a la función para obtener las series temporales de los activos
benchmark_performance = series_tiempo(benchmark)  # Rendimiento del benchmark
security_performance = series_tiempo(security)  # Rendimiento de la seguridad

#para reflejar los datos en dataframes
print("Benchmark Performance ", benchmark)
benchmark_performance.head()

print("Security Performance ", security)
security_performance.head()

###############################################################################

#serie de tiempo de benchmark
benchmark_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='blue',
       label=benchmark, title='Serie de tiempo de precio cierre de ' + benchmark)
plt.show()

#serie de tiempo de security
security_performance.plot(kind='line', x='fecha', y='cierre', grid=True, color='green',
       label=security, title='Serie de tiempo de precio cierre de ' + security)
plt.show()

###############################################################################
#para ver los valores especificos de una variable

benchmark_values=list(benchmark_performance['fecha'].values)
securities_values=list(security_performance['fecha'].values)

###############################################################################
#para filtrar datos en pandas / igualar las variables con los mismos valores

series_de_tiempo = list(set(benchmark_values)& set(securities_values))

serie_x = benchmark_performance[benchmark_performance['fecha'].isin(benchmark_values)]
serie_x = serie_x.sort_values(by='fecha', ascending=True)
serie_x =serie_x.reset_index(drop=True)


serie_y = security_performance[security_performance['fecha'].isin(securities_values)]
serie_y = serie_y.sort_values(by='fecha', ascending=True)
serie_y =serie_y.reset_index(drop=True)

#se crea un data frame del las series de tiempo / los dataframes de pandas se llaman con el nombre de la columna
series_de_tiempo = pd.DataFrame() #se crea un data frame vacio 
#donde se le agregan las variables de los otros cuadros previamente creados
series_de_tiempo ['fecha'] = serie_x['fecha']
series_de_tiempo['cierre_x'] = serie_x['cierre']
series_de_tiempo['cierre_y'] = serie_y['cierre']
series_de_tiempo['rendimiento_x'] = serie_x['rendimiento']
series_de_tiempo['rendimiento_y'] = serie_y['rendimiento']

#hacer una time series sincronizadas, con las columnas cierre, retornos, fecha
#para hacer el plot de las variables unidas en un solo grafico

#grafica de la serie de tiempo conjunta
plt.figure(figsize=(12,5))
plt.title('serie de tiempo de precios de cierre')
plt.xlabel('tiempo')
plt.ylabel('precios')
ax = plt.gca()

#se definen los ejes ax1 para el benchmark / ax2 para el activo a comparar
ax1 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_x', ax=ax, grid= True, \
                            color= 'red', label=benchmark)
     
ax2 = series_de_tiempo.plot(kind='line', x='fecha', y='cierre_y', ax=ax, grid= True, \
                            color= 'black', secondary_y=True, label=security)
#se grafican
ax.legend(loc=2)
ax2.legend(loc=1)
plt.show()

#S&P500 comparado con su indice de volatilidad (^SPX) / VIX (volatilidad con volatilidad es enorme, correlacion es negativa), por lo que el beta es muy grande
#volatilidad del VIX es mucho mas grande que el S&P500
#comparar IPC-BMV / MSCI tracker MXN / NAFTRAC / indice manufacutrero. (EWW)
#comparar divisas USD-MXN /  EUR/USD con MXN/USD , paridad cambiaria.

"VIX es el indice de volatilidad de las opciones del S&P500, cuando los activos suben las opciones se encarecen"
"pero al depreciarse, el valor de las opciones, la gente compra puts como proteccion, haciendo un incremento de volatilidad "
"la volatilidad es inversamente proporcional a los precios"
"Cuando los precios caen aumenta enormentemente la volatilidad (crisis financiera)"
"Cuando los precios suben la volatilidad no sube mucho porque crecen como una recta, solo si es una noticia que afecta mucho el precio "
"S&P precios suben no hay grandes caidas, pero cuando caen hay mucha mas inestabilidad con grades caidas y recuperaciones"

###############################################################################
"Regresion lineal"

x = series_de_tiempo['rendimiento_x'].values
y = series_de_tiempo['rendimiento_y'].values
slope, intercept, r_value, p_value, std_err = st.linregress(x, y)

###############################################################################

#la variacion es la volatilidad / 
#R^2 dice que tanta volatilidad del activo Ra puede explicar el modelo de regresion, con CAPM
#R^2 dice que tanto la recta explica, mayor R^2 el error va ser menor, menos R^2 va a ver mas dispersion del error
#la parte que no explica la R^2 es el error ideosincratico de la regresion, en el calculo del CAPM


#asignacion de valores de la regresion / se busca redondear a 5 decimales con la libreria numpy
decimales = 5
beta =  np.round(slope, decimales) #pendiente / el riesgo sisitematico, exposicion al mercado del activo que no puede ser diversificado
alpha = np.round(intercept, decimales)  #oredenada al origen / retorno absoluto la fraccion del total del retorno que no puede ser explicada por el mercado
correlacion = np.round( r_value, decimales) #R^2 / coeficiente de determinacion, la proporcion de la variacion en la variable dependiente(y), que el modelo predice por parte de x 
p = np.round(p_value, decimales) #hipotesis nula, si la pendiente (Beta) es 0 / con jarque bera la Ho es que la distribucion es normal
error_Estandar = np.round(std_err, decimales) #el error de la pendiente (no se va usar mucho) / riesgo ideosincratico, puede ser eliminado con diversificacion
r_cuadrada = np.round(r_value**2 , decimales) #que tanto explica el modelo de regresion, relacionado al CAPM

#para predecir la regresion lineal
prediccion_regresion_lineal = alpha + beta * x
hipotesis_nula = p_value > 0.05 #si el p_value es inferior a 0.05 se rechaza la hipotesis nula / se acepta la alternativa

###############################################################################

"Con la hipotesis nula se puede decir con un 95% de confianza que el Beta no es 0, por lo que es estadisticamente significativo"
"El valor alfa es muy pequeño"
"Satisface la teoria de mercados eficientes donde alfa tiene que ser 0 porque no puede vencer sistematicamente al mercado"


#Analisis de resultados: beta correlacion con la volatilidad del mercado / correlacion es la correlacion entre activos
print("La pendiente de la beta es de ", beta, ("volatilidad con respecto del mercado"))
print("La correlacion entre ambos es de ", correlacion)
print("EL modelo se explica en un ", r_cuadrada, "con respecto a la volatilidad del valor de la r-cuadrada")
print("El valor de el p-value es de", p_value)
print("El error estandar es", error_Estandar)
#el activo que tiene mayor alfa puede ganar mas porque es el rendimiento independiente de la ordenada al origen
print("El valor alfa es de ", alpha) 
print("El valor tiene una hipotesis nula ", hipotesis_nula)

"Si la hipotesis nula es verdadera significa que el valor de beta no es estadisticamente significativo "

#grafica de la regresion lineal

x = series_de_tiempo ['rendimiento_x'].values
y = series_de_tiempo['rendimiento_y'].values

#asignacion de los nombres de la grafica / corregir grafica.
titulo_grafica = 'Regresión lineal del activo ' + security  \
   + ' | benchmark ' + benchmark + '\n' \
   + ' alfa (intercepto) ' + str(alpha)  \
   + ' | beta (pendiente) ' + str(beta) + '\n'  \
   + ' p-value ' + str(p_value) + \
   ' | hipótesis nula ' + str(hipotesis_nula) + '\n'  \
   + ' r-cuadrada ' + str(r_cuadrada)  \
   + ' | correlación ' + str(correlacion)

    

#segunda grafica con detalles en la parte superior
plt.figure()
plt.title(titulo_grafica)
plt.scatter(x, y)
plt.plot(x, prediccion_regresion_lineal, color='black') 
plt.ylabel(security)
plt.xlabel(benchmark)
plt.grid()
plt.show()








