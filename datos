
from alpha_vantage.timeseries import TimeSeries
import pandas as pd
from datetime import datetime, timedelta

# üîë Tu API Key de Alpha Vantage
api_key = 'TU_API_KEY'
ts = TimeSeries(key=api_key, output_format='pandas')

def get_last_6m(symbol):
    # Obtener todos los datos diarios
    df, meta = ts.get_daily(symbol=symbol, outputsize='full')
    df.index = pd.to_datetime(df.index)
    cutoff = datetime.today() - timedelta(days=182)
    return df[df.index >= cutoff]

# Datos filtrados
df_soxl = get_last_6m('SOXL')
df_walmex = get_last_6m('SPDR')  # s√≠mbolo de Walmex en BMV

# Visualizaci√≥n (primeras filas)
print("SOXL (√∫ltimos 6 meses):")
print(df_soxl.head())
print("\nWalmex (√∫ltimos 6 meses):")
print(df_walmex.head())



import investpy
import pandas as pd

def descargar_walmex(desde='01/01/2024', hasta='17/07/2025'):
    try:
        # Descargar datos hist√≥ricos de WALMEX en M√©xico desde Investing.com
        df = investpy.get_stock_historical_data(stock='WALMEX',
                                                country='mexico',
                                                from_date=desde,
                                                to_date=hasta)
        print(f"Datos descargados correctamente, total registros: {len(df)}")
        print(df.head())

        # Guardar a CSV para an√°lisis posterior
        df.to_csv('walmex_investing.csv')
        print("Datos guardados en 'walmex_investing.csv'")
        
        return df
    
    except Exception as e:
        print("Error al descargar datos:", e)
        return None

# Ejecutar funci√≥n con fechas
datos_walmex = descargar_walmex()



from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import pandas as pd
import time

# Configurar navegador headless (sin ventana)
options = Options()
options.add_argument("--headless")

# Ruta a chromedriver
driver_path = 'ruta/a/tu/chromedriver'  # Cambia esto a la ruta correcta

driver = webdriver.Chrome(executable_path=driver_path, options=options)

# URL de datos hist√≥ricos WALMEX en Investing.com
url = "https://www.investing.com/equities/wal-mex-s-a-b-de-cv-historical-data"

driver.get(url)
time.sleep(5)  # Esperar a que cargue la p√°gina

# Aceptar cookies si aparece (puede variar)
try:
    cookie_btn = driver.find_element(By.ID, "onetrust-accept-btn-handler")
    cookie_btn.click()
    time.sleep(2)
except:
    pass

# Desplazar la tabla para cargar datos (scroll)
driver.execute_script("window.scrollTo(0, 1000);")
time.sleep(2)

# Obtener tabla de datos hist√≥ricos
table = driver.find_element(By.CSS_SELECTOR, "table.genTbl.closedTbl.historicalTbl")

# Extraer datos de la tabla
rows = table.find_elements(By.TAG_NAME, "tr")

data = []
for row in rows[1:]:  # Omitir encabezado
    cols = row.find_elements(By.TAG_NAME, "td")
    if len(cols) == 7:
        fecha = cols[0].text
        precio_cierre = cols[1].text
        apertura = cols[2].text
        maximo = cols[3].text
        minimo = cols[4].text
        volumen = cols[5].text
        cambio = cols[6].text
        data.append([fecha, apertura, maximo, minimo, precio_cierre, volumen, cambio])

driver.quit()

# Crear DataFrame
df = pd.DataFrame(data, columns=["Fecha", "Apertura", "M√°ximo", "M√≠nimo", "Cierre", "Volumen", "Cambio"])

# Mostrar primeras filas
print(df.head())

# Guardar a CSV
df.to_csv("walmex_investing_selenium.csv", index=False)
print("Datos guardados en 'walmex_investing_selenium.csv'")


